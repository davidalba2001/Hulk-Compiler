{
    "foo(1, 2);": {
        "description": "Prueba de llamada a funcion con argumentos.",
        "code": "foo(1, 2);",
        "expected_tokens": [
            [
                "foo",
                "IDENTIFIER"
            ],
            [
                "(",
                "PAREN_OPEN"
            ],
            [
                "1",
                "NUMBER_LITERAL"
            ],
            [
                ",",
                "COMMA"
            ],
            [
                "2",
                "NUMBER_LITERAL"
            ],
            [
                ")",
                "PAREN_CLOSE"
            ],
            [
                ";",
                "SEMICOLON"
            ],
            [
                "$",
                "EOF"
            ]
        ]
    },
    "\n        add(1, 2) * multiply(3, 4);\n        5 + subtract(10, 3);\n        6 ^ 2;\n        (a + b) / 10;\n        (result - c) % 7;\n        print(add(a, b) + multiply(c, subtract(result, d)));\n        ": {
        "description": "Expresiones aritm\u00e9ticas con funciones anidadas, operadores...",
        "code": "\n        add(1, 2) * multiply(3, 4);\n        5 + subtract(10, 3);\n        6 ^ 2;\n        (a + b) / 10;\n        (result - c) % 7;\n        print(add(a, b) + multiply(c, subtract(result, d)));\n        ",
        "expected_tokens": [
            [
                "add",
                "IDENTIFIER"
            ],
            [
                "(",
                "PAREN_OPEN"
            ],
            [
                "1",
                "NUMBER_LITERAL"
            ],
            [
                ",",
                "COMMA"
            ],
            [
                "2",
                "NUMBER_LITERAL"
            ],
            [
                ")",
                "PAREN_CLOSE"
            ],
            [
                "*",
                "MULTIPLY"
            ],
            [
                "multiply",
                "IDENTIFIER"
            ],
            [
                "(",
                "PAREN_OPEN"
            ],
            [
                "3",
                "NUMBER_LITERAL"
            ],
            [
                ",",
                "COMMA"
            ],
            [
                "4",
                "NUMBER_LITERAL"
            ],
            [
                ")",
                "PAREN_CLOSE"
            ],
            [
                ";",
                "SEMICOLON"
            ],
            [
                "5",
                "NUMBER_LITERAL"
            ],
            [
                "+",
                "PLUS"
            ],
            [
                "subtract",
                "IDENTIFIER"
            ],
            [
                "(",
                "PAREN_OPEN"
            ],
            [
                "10",
                "NUMBER_LITERAL"
            ],
            [
                ",",
                "COMMA"
            ],
            [
                "3",
                "NUMBER_LITERAL"
            ],
            [
                ")",
                "PAREN_CLOSE"
            ],
            [
                ";",
                "SEMICOLON"
            ],
            [
                "6",
                "NUMBER_LITERAL"
            ],
            [
                "^",
                "POWER"
            ],
            [
                "2",
                "NUMBER_LITERAL"
            ],
            [
                ";",
                "SEMICOLON"
            ],
            [
                "(",
                "PAREN_OPEN"
            ],
            [
                "a",
                "IDENTIFIER"
            ],
            [
                "+",
                "PLUS"
            ],
            [
                "b",
                "IDENTIFIER"
            ],
            [
                ")",
                "PAREN_CLOSE"
            ],
            [
                "/",
                "DIVIDE"
            ],
            [
                "10",
                "NUMBER_LITERAL"
            ],
            [
                ";",
                "SEMICOLON"
            ],
            [
                "(",
                "PAREN_OPEN"
            ],
            [
                "result",
                "IDENTIFIER"
            ],
            [
                "-",
                "MINUS"
            ],
            [
                "c",
                "IDENTIFIER"
            ],
            [
                ")",
                "PAREN_CLOSE"
            ],
            [
                "%",
                "PERCENT"
            ],
            [
                "7",
                "NUMBER_LITERAL"
            ],
            [
                ";",
                "SEMICOLON"
            ],
            [
                "print",
                "IDENTIFIER"
            ],
            [
                "(",
                "PAREN_OPEN"
            ],
            [
                "add",
                "IDENTIFIER"
            ],
            [
                "(",
                "PAREN_OPEN"
            ],
            [
                "a",
                "IDENTIFIER"
            ],
            [
                ",",
                "COMMA"
            ],
            [
                "b",
                "IDENTIFIER"
            ],
            [
                ")",
                "PAREN_CLOSE"
            ],
            [
                "+",
                "PLUS"
            ],
            [
                "multiply",
                "IDENTIFIER"
            ],
            [
                "(",
                "PAREN_OPEN"
            ],
            [
                "c",
                "IDENTIFIER"
            ],
            [
                ",",
                "COMMA"
            ],
            [
                "subtract",
                "IDENTIFIER"
            ],
            [
                "(",
                "PAREN_OPEN"
            ],
            [
                "result",
                "IDENTIFIER"
            ],
            [
                ",",
                "COMMA"
            ],
            [
                "d",
                "IDENTIFIER"
            ],
            [
                ")",
                "PAREN_CLOSE"
            ],
            [
                ")",
                "PAREN_CLOSE"
            ],
            [
                ")",
                "PAREN_CLOSE"
            ],
            [
                ";",
                "SEMICOLON"
            ],
            [
                "$",
                "EOF"
            ]
        ]
    },
    "print(\"Hello World\");": {
        "description": "Cadena simple.",
        "code": "print(\"Hello World\");",
        "expected_tokens": [
            [
                "print",
                "IDENTIFIER"
            ],
            [
                "(",
                "PAREN_OPEN"
            ],
            [
                "\"Hello World\"",
                "STRING_LITERAL"
            ],
            [
                ")",
                "PAREN_CLOSE"
            ],
            [
                ";",
                "SEMICOLON"
            ],
            [
                "$",
                "EOF"
            ]
        ]
    },
    "print(\"The message is \\\"Hello World\\\"\");": {
        "description": "Comillas dobles escapadas en una cadena.",
        "code": "print(\"The message is \\\"Hello World\\\"\");",
        "expected_tokens": [
            [
                "print",
                "IDENTIFIER"
            ],
            [
                "(",
                "PAREN_OPEN"
            ],
            [
                "\"The message is \\\"Hello World\\\"\"",
                "STRING_LITERAL"
            ],
            [
                ")",
                "PAREN_CLOSE"
            ],
            [
                ";",
                "SEMICOLON"
            ],
            [
                "$",
                "EOF"
            ]
        ]
    },
    "print(\"Hello\\nWorld\");": {
        "description": "Saltos de l\u00ednea escapados en una cadena.",
        "code": "print(\"Hello\\nWorld\");",
        "expected_tokens": [
            [
                "print",
                "IDENTIFIER"
            ],
            [
                "(",
                "PAREN_OPEN"
            ],
            [
                "\"Hello\\nWorld\"",
                "STRING_LITERAL"
            ],
            [
                ")",
                "PAREN_CLOSE"
            ],
            [
                ";",
                "SEMICOLON"
            ],
            [
                "$",
                "EOF"
            ]
        ]
    },
    "print(\"Hello\\tWorld\");": {
        "description": "Tabulaciones escapadas en cadenas.",
        "code": "print(\"Hello\\tWorld\");",
        "expected_tokens": [
            [
                "print",
                "IDENTIFIER"
            ],
            [
                "(",
                "PAREN_OPEN"
            ],
            [
                "\"Hello\\tWorld\"",
                "STRING_LITERAL"
            ],
            [
                ")",
                "PAREN_CLOSE"
            ],
            [
                ";",
                "SEMICOLON"
            ],
            [
                "$",
                "EOF"
            ]
        ]
    },
    "print(\"The meaning of life is \" @ 42);": {
        "description": "Concatenaci\u00f3n de cadenas usando el operador @.",
        "code": "print(\"The meaning of life is \" @ 42);",
        "expected_tokens": [
            [
                "print",
                "IDENTIFIER"
            ],
            [
                "(",
                "PAREN_OPEN"
            ],
            [
                "\"The meaning of life is \"",
                "STRING_LITERAL"
            ],
            [
                "@",
                "AT_SYMBOL"
            ],
            [
                "42",
                "NUMBER_LITERAL"
            ],
            [
                ")",
                "PAREN_CLOSE"
            ],
            [
                ";",
                "SEMICOLON"
            ],
            [
                "$",
                "EOF"
            ]
        ]
    },
    "\n            {\n                print(42);\n                print(sin(PI/2));\n                print(\"Hello World\");\n            }\n            ": {
        "description": "Bloque de m\u00faltiples expresiones .",
        "code": "\n            {\n                print(42);\n                print(sin(PI/2));\n                print(\"Hello World\");\n            }\n            ",
        "expected_tokens": [
            [
                "{",
                "BRACE_OPEN"
            ],
            [
                "print",
                "IDENTIFIER"
            ],
            [
                "(",
                "PAREN_OPEN"
            ],
            [
                "42",
                "NUMBER_LITERAL"
            ],
            [
                ")",
                "PAREN_CLOSE"
            ],
            [
                ";",
                "SEMICOLON"
            ],
            [
                "print",
                "IDENTIFIER"
            ],
            [
                "(",
                "PAREN_OPEN"
            ],
            [
                "sin",
                "IDENTIFIER"
            ],
            [
                "(",
                "PAREN_OPEN"
            ],
            [
                "PI",
                "IDENTIFIER"
            ],
            [
                "/",
                "DIVIDE"
            ],
            [
                "2",
                "NUMBER_LITERAL"
            ],
            [
                ")",
                "PAREN_CLOSE"
            ],
            [
                ")",
                "PAREN_CLOSE"
            ],
            [
                ";",
                "SEMICOLON"
            ],
            [
                "print",
                "IDENTIFIER"
            ],
            [
                "(",
                "PAREN_OPEN"
            ],
            [
                "\"Hello World\"",
                "STRING_LITERAL"
            ],
            [
                ")",
                "PAREN_CLOSE"
            ],
            [
                ";",
                "SEMICOLON"
            ],
            [
                "}",
                "BRACE_CLOSE"
            ],
            [
                "$",
                "EOF"
            ]
        ]
    },
    "\n        function tan(x) => sin(x) / cos(x);\n        function cot(x) => 1 / tan(x);\n        function square(x) => x * x;\n        print(tan(PI) ^ 2 + cot(PI) ^ 2);\n        ": {
        "description": "Definiciones de funciones en l\u00ednea.",
        "code": "\n        function tan(x) => sin(x) / cos(x);\n        function cot(x) => 1 / tan(x);\n        function square(x) => x * x;\n        print(tan(PI) ^ 2 + cot(PI) ^ 2);\n        ",
        "expected_tokens": [
            [
                "function",
                "FUNCTION_KEYWORD"
            ],
            [
                "tan",
                "IDENTIFIER"
            ],
            [
                "(",
                "PAREN_OPEN"
            ],
            [
                "x",
                "IDENTIFIER"
            ],
            [
                ")",
                "PAREN_CLOSE"
            ],
            [
                "=>",
                "ARROW"
            ],
            [
                "sin",
                "IDENTIFIER"
            ],
            [
                "(",
                "PAREN_OPEN"
            ],
            [
                "x",
                "IDENTIFIER"
            ],
            [
                ")",
                "PAREN_CLOSE"
            ],
            [
                "/",
                "DIVIDE"
            ],
            [
                "cos",
                "IDENTIFIER"
            ],
            [
                "(",
                "PAREN_OPEN"
            ],
            [
                "x",
                "IDENTIFIER"
            ],
            [
                ")",
                "PAREN_CLOSE"
            ],
            [
                ";",
                "SEMICOLON"
            ],
            [
                "function",
                "FUNCTION_KEYWORD"
            ],
            [
                "cot",
                "IDENTIFIER"
            ],
            [
                "(",
                "PAREN_OPEN"
            ],
            [
                "x",
                "IDENTIFIER"
            ],
            [
                ")",
                "PAREN_CLOSE"
            ],
            [
                "=>",
                "ARROW"
            ],
            [
                "1",
                "NUMBER_LITERAL"
            ],
            [
                "/",
                "DIVIDE"
            ],
            [
                "tan",
                "IDENTIFIER"
            ],
            [
                "(",
                "PAREN_OPEN"
            ],
            [
                "x",
                "IDENTIFIER"
            ],
            [
                ")",
                "PAREN_CLOSE"
            ],
            [
                ";",
                "SEMICOLON"
            ],
            [
                "function",
                "FUNCTION_KEYWORD"
            ],
            [
                "square",
                "IDENTIFIER"
            ],
            [
                "(",
                "PAREN_OPEN"
            ],
            [
                "x",
                "IDENTIFIER"
            ],
            [
                ")",
                "PAREN_CLOSE"
            ],
            [
                "=>",
                "ARROW"
            ],
            [
                "x",
                "IDENTIFIER"
            ],
            [
                "*",
                "MULTIPLY"
            ],
            [
                "x",
                "IDENTIFIER"
            ],
            [
                ";",
                "SEMICOLON"
            ],
            [
                "print",
                "IDENTIFIER"
            ],
            [
                "(",
                "PAREN_OPEN"
            ],
            [
                "tan",
                "IDENTIFIER"
            ],
            [
                "(",
                "PAREN_OPEN"
            ],
            [
                "PI",
                "IDENTIFIER"
            ],
            [
                ")",
                "PAREN_CLOSE"
            ],
            [
                "^",
                "POWER"
            ],
            [
                "2",
                "NUMBER_LITERAL"
            ],
            [
                "+",
                "PLUS"
            ],
            [
                "cot",
                "IDENTIFIER"
            ],
            [
                "(",
                "PAREN_OPEN"
            ],
            [
                "PI",
                "IDENTIFIER"
            ],
            [
                ")",
                "PAREN_CLOSE"
            ],
            [
                "^",
                "POWER"
            ],
            [
                "2",
                "NUMBER_LITERAL"
            ],
            [
                ")",
                "PAREN_CLOSE"
            ],
            [
                ";",
                "SEMICOLON"
            ],
            [
                "$",
                "EOF"
            ]
        ]
    },
    "\n        function operate(x, y) {\n            print(x + y);\n            print(x - y);\n            print(x * y);\n            print(x / y);\n        }\n        ": {
        "description": "Definiciones de funciones en su forma completa.",
        "code": "\n        function operate(x, y) {\n            print(x + y);\n            print(x - y);\n            print(x * y);\n            print(x / y);\n        }\n        ",
        "expected_tokens": [
            [
                "function",
                "FUNCTION_KEYWORD"
            ],
            [
                "operate",
                "IDENTIFIER"
            ],
            [
                "(",
                "PAREN_OPEN"
            ],
            [
                "x",
                "IDENTIFIER"
            ],
            [
                ",",
                "COMMA"
            ],
            [
                "y",
                "IDENTIFIER"
            ],
            [
                ")",
                "PAREN_CLOSE"
            ],
            [
                "{",
                "BRACE_OPEN"
            ],
            [
                "print",
                "IDENTIFIER"
            ],
            [
                "(",
                "PAREN_OPEN"
            ],
            [
                "x",
                "IDENTIFIER"
            ],
            [
                "+",
                "PLUS"
            ],
            [
                "y",
                "IDENTIFIER"
            ],
            [
                ")",
                "PAREN_CLOSE"
            ],
            [
                ";",
                "SEMICOLON"
            ],
            [
                "print",
                "IDENTIFIER"
            ],
            [
                "(",
                "PAREN_OPEN"
            ],
            [
                "x",
                "IDENTIFIER"
            ],
            [
                "-",
                "MINUS"
            ],
            [
                "y",
                "IDENTIFIER"
            ],
            [
                ")",
                "PAREN_CLOSE"
            ],
            [
                ";",
                "SEMICOLON"
            ],
            [
                "print",
                "IDENTIFIER"
            ],
            [
                "(",
                "PAREN_OPEN"
            ],
            [
                "x",
                "IDENTIFIER"
            ],
            [
                "*",
                "MULTIPLY"
            ],
            [
                "y",
                "IDENTIFIER"
            ],
            [
                ")",
                "PAREN_CLOSE"
            ],
            [
                ";",
                "SEMICOLON"
            ],
            [
                "print",
                "IDENTIFIER"
            ],
            [
                "(",
                "PAREN_OPEN"
            ],
            [
                "x",
                "IDENTIFIER"
            ],
            [
                "/",
                "DIVIDE"
            ],
            [
                "y",
                "IDENTIFIER"
            ],
            [
                ")",
                "PAREN_CLOSE"
            ],
            [
                ";",
                "SEMICOLON"
            ],
            [
                "}",
                "BRACE_CLOSE"
            ],
            [
                "$",
                "EOF"
            ]
        ]
    },
    "let msg = \"Hello World\" in print(msg);": {
        "description": "Declarcion de una variable con let",
        "code": "let msg = \"Hello World\" in print(msg);",
        "expected_tokens": [
            [
                "let",
                "LET_KEYWORD"
            ],
            [
                "msg",
                "IDENTIFIER"
            ],
            [
                "=",
                "ASSIGN"
            ],
            [
                "\"Hello World\"",
                "STRING_LITERAL"
            ],
            [
                "in",
                "IN_KEYWORD"
            ],
            [
                "print",
                "IDENTIFIER"
            ],
            [
                "(",
                "PAREN_OPEN"
            ],
            [
                "msg",
                "IDENTIFIER"
            ],
            [
                ")",
                "PAREN_CLOSE"
            ],
            [
                ";",
                "SEMICOLON"
            ],
            [
                "$",
                "EOF"
            ]
        ]
    },
    "let number = 42, text = \"The meaning of life is\" in print(text @ number);": {
        "description": "Declaraci\u00f3n de m\u00faltiples variables con let.",
        "code": "let number = 42, text = \"The meaning of life is\" in print(text @ number);",
        "expected_tokens": [
            [
                "let",
                "LET_KEYWORD"
            ],
            [
                "number",
                "IDENTIFIER"
            ],
            [
                "=",
                "ASSIGN"
            ],
            [
                "42",
                "NUMBER_LITERAL"
            ],
            [
                ",",
                "COMMA"
            ],
            [
                "text",
                "IDENTIFIER"
            ],
            [
                "=",
                "ASSIGN"
            ],
            [
                "\"The meaning of life is\"",
                "STRING_LITERAL"
            ],
            [
                "in",
                "IN_KEYWORD"
            ],
            [
                "print",
                "IDENTIFIER"
            ],
            [
                "(",
                "PAREN_OPEN"
            ],
            [
                "text",
                "IDENTIFIER"
            ],
            [
                "@",
                "AT_SYMBOL"
            ],
            [
                "number",
                "IDENTIFIER"
            ],
            [
                ")",
                "PAREN_CLOSE"
            ],
            [
                ";",
                "SEMICOLON"
            ],
            [
                "$",
                "EOF"
            ]
        ]
    },
    "let a = 6, b = a * 7 in print(b);": {
        "description": "Declaracion de una variable al definir otra con let.",
        "code": "let a = 6, b = a * 7 in print(b);",
        "expected_tokens": [
            [
                "let",
                "LET_KEYWORD"
            ],
            [
                "a",
                "IDENTIFIER"
            ],
            [
                "=",
                "ASSIGN"
            ],
            [
                "6",
                "NUMBER_LITERAL"
            ],
            [
                ",",
                "COMMA"
            ],
            [
                "b",
                "IDENTIFIER"
            ],
            [
                "=",
                "ASSIGN"
            ],
            [
                "a",
                "IDENTIFIER"
            ],
            [
                "*",
                "MULTIPLY"
            ],
            [
                "7",
                "NUMBER_LITERAL"
            ],
            [
                "in",
                "IN_KEYWORD"
            ],
            [
                "print",
                "IDENTIFIER"
            ],
            [
                "(",
                "PAREN_OPEN"
            ],
            [
                "b",
                "IDENTIFIER"
            ],
            [
                ")",
                "PAREN_CLOSE"
            ],
            [
                ";",
                "SEMICOLON"
            ],
            [
                "$",
                "EOF"
            ]
        ]
    },
    "\n        let a = 5, b = 10, c = 20 in {\n            print(a + b);\n            print(b * c);\n            print(c / a);\n        }\n        ": {
        "description": "Bloque de expresi\u00f3n como cuerpo de un let",
        "code": "\n        let a = 5, b = 10, c = 20 in {\n            print(a + b);\n            print(b * c);\n            print(c / a);\n        }\n        ",
        "expected_tokens": [
            [
                "let",
                "LET_KEYWORD"
            ],
            [
                "a",
                "IDENTIFIER"
            ],
            [
                "=",
                "ASSIGN"
            ],
            [
                "5",
                "NUMBER_LITERAL"
            ],
            [
                ",",
                "COMMA"
            ],
            [
                "b",
                "IDENTIFIER"
            ],
            [
                "=",
                "ASSIGN"
            ],
            [
                "10",
                "NUMBER_LITERAL"
            ],
            [
                ",",
                "COMMA"
            ],
            [
                "c",
                "IDENTIFIER"
            ],
            [
                "=",
                "ASSIGN"
            ],
            [
                "20",
                "NUMBER_LITERAL"
            ],
            [
                "in",
                "IN_KEYWORD"
            ],
            [
                "{",
                "BRACE_OPEN"
            ],
            [
                "print",
                "IDENTIFIER"
            ],
            [
                "(",
                "PAREN_OPEN"
            ],
            [
                "a",
                "IDENTIFIER"
            ],
            [
                "+",
                "PLUS"
            ],
            [
                "b",
                "IDENTIFIER"
            ],
            [
                ")",
                "PAREN_CLOSE"
            ],
            [
                ";",
                "SEMICOLON"
            ],
            [
                "print",
                "IDENTIFIER"
            ],
            [
                "(",
                "PAREN_OPEN"
            ],
            [
                "b",
                "IDENTIFIER"
            ],
            [
                "*",
                "MULTIPLY"
            ],
            [
                "c",
                "IDENTIFIER"
            ],
            [
                ")",
                "PAREN_CLOSE"
            ],
            [
                ";",
                "SEMICOLON"
            ],
            [
                "print",
                "IDENTIFIER"
            ],
            [
                "(",
                "PAREN_OPEN"
            ],
            [
                "c",
                "IDENTIFIER"
            ],
            [
                "/",
                "DIVIDE"
            ],
            [
                "a",
                "IDENTIFIER"
            ],
            [
                ")",
                "PAREN_CLOSE"
            ],
            [
                ";",
                "SEMICOLON"
            ],
            [
                "}",
                "BRACE_CLOSE"
            ],
            [
                "$",
                "EOF"
            ]
        ]
    },
    "let a = (let b = 6 in b * 7) in print(a);": {
        "description": "Expresiones let anidadas en la declarci\u00f3n de un variable.",
        "code": "let a = (let b = 6 in b * 7) in print(a);",
        "expected_tokens": [
            [
                "let",
                "LET_KEYWORD"
            ],
            [
                "a",
                "IDENTIFIER"
            ],
            [
                "=",
                "ASSIGN"
            ],
            [
                "(",
                "PAREN_OPEN"
            ],
            [
                "let",
                "LET_KEYWORD"
            ],
            [
                "b",
                "IDENTIFIER"
            ],
            [
                "=",
                "ASSIGN"
            ],
            [
                "6",
                "NUMBER_LITERAL"
            ],
            [
                "in",
                "IN_KEYWORD"
            ],
            [
                "b",
                "IDENTIFIER"
            ],
            [
                "*",
                "MULTIPLY"
            ],
            [
                "7",
                "NUMBER_LITERAL"
            ],
            [
                ")",
                "PAREN_CLOSE"
            ],
            [
                "in",
                "IN_KEYWORD"
            ],
            [
                "print",
                "IDENTIFIER"
            ],
            [
                "(",
                "PAREN_OPEN"
            ],
            [
                "a",
                "IDENTIFIER"
            ],
            [
                ")",
                "PAREN_CLOSE"
            ],
            [
                ";",
                "SEMICOLON"
            ],
            [
                "$",
                "EOF"
            ]
        ]
    },
    "\n        let a = 20 in {\n            let a = 42 in print(a);\n            print(a);\n        }\n        ": {
        "description": "Expresiones let anidadas en el cuerpo y con redefinici\u00f3n de variables.",
        "code": "\n        let a = 20 in {\n            let a = 42 in print(a);\n            print(a);\n        }\n        ",
        "expected_tokens": [
            [
                "let",
                "LET_KEYWORD"
            ],
            [
                "a",
                "IDENTIFIER"
            ],
            [
                "=",
                "ASSIGN"
            ],
            [
                "20",
                "NUMBER_LITERAL"
            ],
            [
                "in",
                "IN_KEYWORD"
            ],
            [
                "{",
                "BRACE_OPEN"
            ],
            [
                "let",
                "LET_KEYWORD"
            ],
            [
                "a",
                "IDENTIFIER"
            ],
            [
                "=",
                "ASSIGN"
            ],
            [
                "42",
                "NUMBER_LITERAL"
            ],
            [
                "in",
                "IN_KEYWORD"
            ],
            [
                "print",
                "IDENTIFIER"
            ],
            [
                "(",
                "PAREN_OPEN"
            ],
            [
                "a",
                "IDENTIFIER"
            ],
            [
                ")",
                "PAREN_CLOSE"
            ],
            [
                ";",
                "SEMICOLON"
            ],
            [
                "print",
                "IDENTIFIER"
            ],
            [
                "(",
                "PAREN_OPEN"
            ],
            [
                "a",
                "IDENTIFIER"
            ],
            [
                ")",
                "PAREN_CLOSE"
            ],
            [
                ";",
                "SEMICOLON"
            ],
            [
                "}",
                "BRACE_CLOSE"
            ],
            [
                "$",
                "EOF"
            ]
        ]
    },
    "\n        let a = 0 in {\n            print(a);\n            a := 1;\n            print(a);\n        }\n        ": {
        "description": "Asignaci\u00f3n destructiva de variables.",
        "code": "\n        let a = 0 in {\n            print(a);\n            a := 1;\n            print(a);\n        }\n        ",
        "expected_tokens": [
            [
                "let",
                "LET_KEYWORD"
            ],
            [
                "a",
                "IDENTIFIER"
            ],
            [
                "=",
                "ASSIGN"
            ],
            [
                "0",
                "NUMBER_LITERAL"
            ],
            [
                "in",
                "IN_KEYWORD"
            ],
            [
                "{",
                "BRACE_OPEN"
            ],
            [
                "print",
                "IDENTIFIER"
            ],
            [
                "(",
                "PAREN_OPEN"
            ],
            [
                "a",
                "IDENTIFIER"
            ],
            [
                ")",
                "PAREN_CLOSE"
            ],
            [
                ";",
                "SEMICOLON"
            ],
            [
                "a",
                "IDENTIFIER"
            ],
            [
                ":=",
                "DASSIGN"
            ],
            [
                "1",
                "NUMBER_LITERAL"
            ],
            [
                ";",
                "SEMICOLON"
            ],
            [
                "print",
                "IDENTIFIER"
            ],
            [
                "(",
                "PAREN_OPEN"
            ],
            [
                "a",
                "IDENTIFIER"
            ],
            [
                ")",
                "PAREN_CLOSE"
            ],
            [
                ";",
                "SEMICOLON"
            ],
            [
                "}",
                "BRACE_CLOSE"
            ],
            [
                "$",
                "EOF"
            ]
        ]
    },
    "let a = 42 in if (a % 2 == 0) print(\"Even\") else print(\"Odd\");": {
        "description": "Prueba b\u00e1sica de un if.",
        "code": "let a = 42 in if (a % 2 == 0) print(\"Even\") else print(\"Odd\");",
        "expected_tokens": [
            [
                "let",
                "LET_KEYWORD"
            ],
            [
                "a",
                "IDENTIFIER"
            ],
            [
                "=",
                "ASSIGN"
            ],
            [
                "42",
                "NUMBER_LITERAL"
            ],
            [
                "in",
                "IN_KEYWORD"
            ],
            [
                "if",
                "IF_KEYWORD"
            ],
            [
                "(",
                "PAREN_OPEN"
            ],
            [
                "a",
                "IDENTIFIER"
            ],
            [
                "%",
                "PERCENT"
            ],
            [
                "2",
                "NUMBER_LITERAL"
            ],
            [
                "==",
                "EQUAL"
            ],
            [
                "0",
                "NUMBER_LITERAL"
            ],
            [
                ")",
                "PAREN_CLOSE"
            ],
            [
                "print",
                "IDENTIFIER"
            ],
            [
                "(",
                "PAREN_OPEN"
            ],
            [
                "\"Even\"",
                "STRING_LITERAL"
            ],
            [
                ")",
                "PAREN_CLOSE"
            ],
            [
                "else",
                "ELSE_KEYWORD"
            ],
            [
                "print",
                "IDENTIFIER"
            ],
            [
                "(",
                "PAREN_OPEN"
            ],
            [
                "\"Odd\"",
                "STRING_LITERAL"
            ],
            [
                ")",
                "PAREN_CLOSE"
            ],
            [
                ";",
                "SEMICOLON"
            ],
            [
                "$",
                "EOF"
            ]
        ]
    },
    "let a = 42 in print(if (a % 2 == 0) \"Even\" else \"Odd\");": {
        "description": "Prueba b\u00e1sica de un if.",
        "code": "let a = 42 in print(if (a % 2 == 0) \"Even\" else \"Odd\");",
        "expected_tokens": [
            [
                "let",
                "LET_KEYWORD"
            ],
            [
                "a",
                "IDENTIFIER"
            ],
            [
                "=",
                "ASSIGN"
            ],
            [
                "42",
                "NUMBER_LITERAL"
            ],
            [
                "in",
                "IN_KEYWORD"
            ],
            [
                "print",
                "IDENTIFIER"
            ],
            [
                "(",
                "PAREN_OPEN"
            ],
            [
                "if",
                "IF_KEYWORD"
            ],
            [
                "(",
                "PAREN_OPEN"
            ],
            [
                "a",
                "IDENTIFIER"
            ],
            [
                "%",
                "PERCENT"
            ],
            [
                "2",
                "NUMBER_LITERAL"
            ],
            [
                "==",
                "EQUAL"
            ],
            [
                "0",
                "NUMBER_LITERAL"
            ],
            [
                ")",
                "PAREN_CLOSE"
            ],
            [
                "\"Even\"",
                "STRING_LITERAL"
            ],
            [
                "else",
                "ELSE_KEYWORD"
            ],
            [
                "\"Odd\"",
                "STRING_LITERAL"
            ],
            [
                ")",
                "PAREN_CLOSE"
            ],
            [
                ";",
                "SEMICOLON"
            ],
            [
                "$",
                "EOF"
            ]
        ]
    },
    "let a = true, b = false | a in if (a & !b) print(\"Yes\") else print(\"No\");": {
        "description": "Operadores l\u00f3gicos b\u00e1sicos.",
        "code": "let a = true, b = false | a in if (a & !b) print(\"Yes\") else print(\"No\");",
        "expected_tokens": [
            [
                "let",
                "LET_KEYWORD"
            ],
            [
                "a",
                "IDENTIFIER"
            ],
            [
                "=",
                "ASSIGN"
            ],
            [
                "true",
                "TRUE_KEYWORD"
            ],
            [
                ",",
                "COMMA"
            ],
            [
                "b",
                "IDENTIFIER"
            ],
            [
                "=",
                "ASSIGN"
            ],
            [
                "false",
                "FALSE_KEYWORD"
            ],
            [
                "|",
                "PIPE"
            ],
            [
                "a",
                "IDENTIFIER"
            ],
            [
                "in",
                "IN_KEYWORD"
            ],
            [
                "if",
                "IF_KEYWORD"
            ],
            [
                "(",
                "PAREN_OPEN"
            ],
            [
                "a",
                "IDENTIFIER"
            ],
            [
                "&",
                "AND_OP"
            ],
            [
                "!",
                "NOT_OP"
            ],
            [
                "b",
                "IDENTIFIER"
            ],
            [
                ")",
                "PAREN_CLOSE"
            ],
            [
                "print",
                "IDENTIFIER"
            ],
            [
                "(",
                "PAREN_OPEN"
            ],
            [
                "\"Yes\"",
                "STRING_LITERAL"
            ],
            [
                ")",
                "PAREN_CLOSE"
            ],
            [
                "else",
                "ELSE_KEYWORD"
            ],
            [
                "print",
                "IDENTIFIER"
            ],
            [
                "(",
                "PAREN_OPEN"
            ],
            [
                "\"No\"",
                "STRING_LITERAL"
            ],
            [
                ")",
                "PAREN_CLOSE"
            ],
            [
                ";",
                "SEMICOLON"
            ],
            [
                "$",
                "EOF"
            ]
        ]
    },
    "\n        let a = 42 in\n            if (a % 2 == 0) {\n                print(a);\n                print(\"Even\");\n            }\n            else print(\"Odd\");\n        ": {
        "description": "Bloque de expresi\u00f3n en condicionales.",
        "code": "\n        let a = 42 in\n            if (a % 2 == 0) {\n                print(a);\n                print(\"Even\");\n            }\n            else print(\"Odd\");\n        ",
        "expected_tokens": [
            [
                "let",
                "LET_KEYWORD"
            ],
            [
                "a",
                "IDENTIFIER"
            ],
            [
                "=",
                "ASSIGN"
            ],
            [
                "42",
                "NUMBER_LITERAL"
            ],
            [
                "in",
                "IN_KEYWORD"
            ],
            [
                "if",
                "IF_KEYWORD"
            ],
            [
                "(",
                "PAREN_OPEN"
            ],
            [
                "a",
                "IDENTIFIER"
            ],
            [
                "%",
                "PERCENT"
            ],
            [
                "2",
                "NUMBER_LITERAL"
            ],
            [
                "==",
                "EQUAL"
            ],
            [
                "0",
                "NUMBER_LITERAL"
            ],
            [
                ")",
                "PAREN_CLOSE"
            ],
            [
                "{",
                "BRACE_OPEN"
            ],
            [
                "print",
                "IDENTIFIER"
            ],
            [
                "(",
                "PAREN_OPEN"
            ],
            [
                "a",
                "IDENTIFIER"
            ],
            [
                ")",
                "PAREN_CLOSE"
            ],
            [
                ";",
                "SEMICOLON"
            ],
            [
                "print",
                "IDENTIFIER"
            ],
            [
                "(",
                "PAREN_OPEN"
            ],
            [
                "\"Even\"",
                "STRING_LITERAL"
            ],
            [
                ")",
                "PAREN_CLOSE"
            ],
            [
                ";",
                "SEMICOLON"
            ],
            [
                "}",
                "BRACE_CLOSE"
            ],
            [
                "else",
                "ELSE_KEYWORD"
            ],
            [
                "print",
                "IDENTIFIER"
            ],
            [
                "(",
                "PAREN_OPEN"
            ],
            [
                "\"Odd\"",
                "STRING_LITERAL"
            ],
            [
                ")",
                "PAREN_CLOSE"
            ],
            [
                ";",
                "SEMICOLON"
            ],
            [
                "$",
                "EOF"
            ]
        ]
    },
    "\n        let a = 42, mod = a % 3 in\n            print(\n                if (mod == 0) \"Magic\"\n                elif (mod % 3 == 1) \"Woke\"\n                else \"Dumb\"\n            );\n        ": {
        "description": "M\u00faltiples ramas en un condicional.",
        "code": "\n        let a = 42, mod = a % 3 in\n            print(\n                if (mod == 0) \"Magic\"\n                elif (mod % 3 == 1) \"Woke\"\n                else \"Dumb\"\n            );\n        ",
        "expected_tokens": [
            [
                "let",
                "LET_KEYWORD"
            ],
            [
                "a",
                "IDENTIFIER"
            ],
            [
                "=",
                "ASSIGN"
            ],
            [
                "42",
                "NUMBER_LITERAL"
            ],
            [
                ",",
                "COMMA"
            ],
            [
                "mod",
                "IDENTIFIER"
            ],
            [
                "=",
                "ASSIGN"
            ],
            [
                "a",
                "IDENTIFIER"
            ],
            [
                "%",
                "PERCENT"
            ],
            [
                "3",
                "NUMBER_LITERAL"
            ],
            [
                "in",
                "IN_KEYWORD"
            ],
            [
                "print",
                "IDENTIFIER"
            ],
            [
                "(",
                "PAREN_OPEN"
            ],
            [
                "if",
                "IF_KEYWORD"
            ],
            [
                "(",
                "PAREN_OPEN"
            ],
            [
                "mod",
                "IDENTIFIER"
            ],
            [
                "==",
                "EQUAL"
            ],
            [
                "0",
                "NUMBER_LITERAL"
            ],
            [
                ")",
                "PAREN_CLOSE"
            ],
            [
                "\"Magic\"",
                "STRING_LITERAL"
            ],
            [
                "elif",
                "ELIF_KEYWORD"
            ],
            [
                "(",
                "PAREN_OPEN"
            ],
            [
                "mod",
                "IDENTIFIER"
            ],
            [
                "%",
                "PERCENT"
            ],
            [
                "3",
                "NUMBER_LITERAL"
            ],
            [
                "==",
                "EQUAL"
            ],
            [
                "1",
                "NUMBER_LITERAL"
            ],
            [
                ")",
                "PAREN_CLOSE"
            ],
            [
                "\"Woke\"",
                "STRING_LITERAL"
            ],
            [
                "else",
                "ELSE_KEYWORD"
            ],
            [
                "\"Dumb\"",
                "STRING_LITERAL"
            ],
            [
                ")",
                "PAREN_CLOSE"
            ],
            [
                ";",
                "SEMICOLON"
            ],
            [
                "$",
                "EOF"
            ]
        ]
    },
    "\n        let a = 10 in while (a >= 0) {\n            print(a);\n            a := a - 1;\n        };\n        ": {
        "description": "Bucle while como cuerpo de un let.",
        "code": "\n        let a = 10 in while (a >= 0) {\n            print(a);\n            a := a - 1;\n        };\n        ",
        "expected_tokens": [
            [
                "let",
                "LET_KEYWORD"
            ],
            [
                "a",
                "IDENTIFIER"
            ],
            [
                "=",
                "ASSIGN"
            ],
            [
                "10",
                "NUMBER_LITERAL"
            ],
            [
                "in",
                "IN_KEYWORD"
            ],
            [
                "while",
                "WHILE_KEYWORD"
            ],
            [
                "(",
                "PAREN_OPEN"
            ],
            [
                "a",
                "IDENTIFIER"
            ],
            [
                ">=",
                "GREATER_EQUAL"
            ],
            [
                "0",
                "NUMBER_LITERAL"
            ],
            [
                ")",
                "PAREN_CLOSE"
            ],
            [
                "{",
                "BRACE_OPEN"
            ],
            [
                "print",
                "IDENTIFIER"
            ],
            [
                "(",
                "PAREN_OPEN"
            ],
            [
                "a",
                "IDENTIFIER"
            ],
            [
                ")",
                "PAREN_CLOSE"
            ],
            [
                ";",
                "SEMICOLON"
            ],
            [
                "a",
                "IDENTIFIER"
            ],
            [
                ":=",
                "DASSIGN"
            ],
            [
                "a",
                "IDENTIFIER"
            ],
            [
                "-",
                "MINUS"
            ],
            [
                "1",
                "NUMBER_LITERAL"
            ],
            [
                ";",
                "SEMICOLON"
            ],
            [
                "}",
                "BRACE_CLOSE"
            ],
            [
                ";",
                "SEMICOLON"
            ],
            [
                "$",
                "EOF"
            ]
        ]
    },
    "\n        function gcd(a, b) => while (a > 0)\n            let m = a % b in {\n                b := a;\n                a := m;\n            };\n        ": {
        "description": "Bucle while como cuerpo de una funci\u00f3n en linea.",
        "code": "\n        function gcd(a, b) => while (a > 0)\n            let m = a % b in {\n                b := a;\n                a := m;\n            };\n        ",
        "expected_tokens": [
            [
                "function",
                "FUNCTION_KEYWORD"
            ],
            [
                "gcd",
                "IDENTIFIER"
            ],
            [
                "(",
                "PAREN_OPEN"
            ],
            [
                "a",
                "IDENTIFIER"
            ],
            [
                ",",
                "COMMA"
            ],
            [
                "b",
                "IDENTIFIER"
            ],
            [
                ")",
                "PAREN_CLOSE"
            ],
            [
                "=>",
                "ARROW"
            ],
            [
                "while",
                "WHILE_KEYWORD"
            ],
            [
                "(",
                "PAREN_OPEN"
            ],
            [
                "a",
                "IDENTIFIER"
            ],
            [
                ">",
                "GREATER_THAN"
            ],
            [
                "0",
                "NUMBER_LITERAL"
            ],
            [
                ")",
                "PAREN_CLOSE"
            ],
            [
                "let",
                "LET_KEYWORD"
            ],
            [
                "m",
                "IDENTIFIER"
            ],
            [
                "=",
                "ASSIGN"
            ],
            [
                "a",
                "IDENTIFIER"
            ],
            [
                "%",
                "PERCENT"
            ],
            [
                "b",
                "IDENTIFIER"
            ],
            [
                "in",
                "IN_KEYWORD"
            ],
            [
                "{",
                "BRACE_OPEN"
            ],
            [
                "b",
                "IDENTIFIER"
            ],
            [
                ":=",
                "DASSIGN"
            ],
            [
                "a",
                "IDENTIFIER"
            ],
            [
                ";",
                "SEMICOLON"
            ],
            [
                "a",
                "IDENTIFIER"
            ],
            [
                ":=",
                "DASSIGN"
            ],
            [
                "m",
                "IDENTIFIER"
            ],
            [
                ";",
                "SEMICOLON"
            ],
            [
                "}",
                "BRACE_CLOSE"
            ],
            [
                ";",
                "SEMICOLON"
            ],
            [
                "$",
                "EOF"
            ]
        ]
    },
    "for (x in range(0, 10)) print(x);": {
        "description": "Bucle for como cuerpo de un let.",
        "code": "for (x in range(0, 10)) print(x);",
        "expected_tokens": [
            [
                "for",
                "FOR_KEYWORD"
            ],
            [
                "(",
                "PAREN_OPEN"
            ],
            [
                "x",
                "IDENTIFIER"
            ],
            [
                "in",
                "IN_KEYWORD"
            ],
            [
                "range",
                "IDENTIFIER"
            ],
            [
                "(",
                "PAREN_OPEN"
            ],
            [
                "0",
                "NUMBER_LITERAL"
            ],
            [
                ",",
                "COMMA"
            ],
            [
                "10",
                "NUMBER_LITERAL"
            ],
            [
                ")",
                "PAREN_CLOSE"
            ],
            [
                ")",
                "PAREN_CLOSE"
            ],
            [
                "print",
                "IDENTIFIER"
            ],
            [
                "(",
                "PAREN_OPEN"
            ],
            [
                "x",
                "IDENTIFIER"
            ],
            [
                ")",
                "PAREN_CLOSE"
            ],
            [
                ";",
                "SEMICOLON"
            ],
            [
                "$",
                "EOF"
            ]
        ]
    },
    "\n        let iterable = range(0, 10) in\n            while (iterable.next())\n                let x = iterable.current() in\n                    print(x);\n        ": {
        "description": "Bucle while equivalente Bucle for.",
        "code": "\n        let iterable = range(0, 10) in\n            while (iterable.next())\n                let x = iterable.current() in\n                    print(x);\n        ",
        "expected_tokens": [
            [
                "let",
                "LET_KEYWORD"
            ],
            [
                "iterable",
                "IDENTIFIER"
            ],
            [
                "=",
                "ASSIGN"
            ],
            [
                "range",
                "IDENTIFIER"
            ],
            [
                "(",
                "PAREN_OPEN"
            ],
            [
                "0",
                "NUMBER_LITERAL"
            ],
            [
                ",",
                "COMMA"
            ],
            [
                "10",
                "NUMBER_LITERAL"
            ],
            [
                ")",
                "PAREN_CLOSE"
            ],
            [
                "in",
                "IN_KEYWORD"
            ],
            [
                "while",
                "WHILE_KEYWORD"
            ],
            [
                "(",
                "PAREN_OPEN"
            ],
            [
                "iterable",
                "IDENTIFIER"
            ],
            [
                ".",
                "DOT"
            ],
            [
                "next",
                "IDENTIFIER"
            ],
            [
                "(",
                "PAREN_OPEN"
            ],
            [
                ")",
                "PAREN_CLOSE"
            ],
            [
                ")",
                "PAREN_CLOSE"
            ],
            [
                "let",
                "LET_KEYWORD"
            ],
            [
                "x",
                "IDENTIFIER"
            ],
            [
                "=",
                "ASSIGN"
            ],
            [
                "iterable",
                "IDENTIFIER"
            ],
            [
                ".",
                "DOT"
            ],
            [
                "current",
                "IDENTIFIER"
            ],
            [
                "(",
                "PAREN_OPEN"
            ],
            [
                ")",
                "PAREN_CLOSE"
            ],
            [
                "in",
                "IN_KEYWORD"
            ],
            [
                "print",
                "IDENTIFIER"
            ],
            [
                "(",
                "PAREN_OPEN"
            ],
            [
                "x",
                "IDENTIFIER"
            ],
            [
                ")",
                "PAREN_CLOSE"
            ],
            [
                ";",
                "SEMICOLON"
            ],
            [
                "$",
                "EOF"
            ]
        ]
    },
    "\n        type Point {\n            x = 0;\n            y = 0;\n\n            getX() => self.x;\n            getY() => self.y;\n\n            setX(x) => self.x := x;\n            setY(y) => self.y := y;\n        }\n        ": {
        "description": "Declaraci\u00f3n de un tipo.",
        "code": "\n        type Point {\n            x = 0;\n            y = 0;\n\n            getX() => self.x;\n            getY() => self.y;\n\n            setX(x) => self.x := x;\n            setY(y) => self.y := y;\n        }\n        ",
        "expected_tokens": [
            [
                "type",
                "TYPE_KEYWORD"
            ],
            [
                "Point",
                "IDENTIFIER"
            ],
            [
                "{",
                "BRACE_OPEN"
            ],
            [
                "x",
                "IDENTIFIER"
            ],
            [
                "=",
                "ASSIGN"
            ],
            [
                "0",
                "NUMBER_LITERAL"
            ],
            [
                ";",
                "SEMICOLON"
            ],
            [
                "y",
                "IDENTIFIER"
            ],
            [
                "=",
                "ASSIGN"
            ],
            [
                "0",
                "NUMBER_LITERAL"
            ],
            [
                ";",
                "SEMICOLON"
            ],
            [
                "getX",
                "IDENTIFIER"
            ],
            [
                "(",
                "PAREN_OPEN"
            ],
            [
                ")",
                "PAREN_CLOSE"
            ],
            [
                "=>",
                "ARROW"
            ],
            [
                "self",
                "IDENTIFIER"
            ],
            [
                ".",
                "DOT"
            ],
            [
                "x",
                "IDENTIFIER"
            ],
            [
                ";",
                "SEMICOLON"
            ],
            [
                "getY",
                "IDENTIFIER"
            ],
            [
                "(",
                "PAREN_OPEN"
            ],
            [
                ")",
                "PAREN_CLOSE"
            ],
            [
                "=>",
                "ARROW"
            ],
            [
                "self",
                "IDENTIFIER"
            ],
            [
                ".",
                "DOT"
            ],
            [
                "y",
                "IDENTIFIER"
            ],
            [
                ";",
                "SEMICOLON"
            ],
            [
                "setX",
                "IDENTIFIER"
            ],
            [
                "(",
                "PAREN_OPEN"
            ],
            [
                "x",
                "IDENTIFIER"
            ],
            [
                ")",
                "PAREN_CLOSE"
            ],
            [
                "=>",
                "ARROW"
            ],
            [
                "self",
                "IDENTIFIER"
            ],
            [
                ".",
                "DOT"
            ],
            [
                "x",
                "IDENTIFIER"
            ],
            [
                ":=",
                "DASSIGN"
            ],
            [
                "x",
                "IDENTIFIER"
            ],
            [
                ";",
                "SEMICOLON"
            ],
            [
                "setY",
                "IDENTIFIER"
            ],
            [
                "(",
                "PAREN_OPEN"
            ],
            [
                "y",
                "IDENTIFIER"
            ],
            [
                ")",
                "PAREN_CLOSE"
            ],
            [
                "=>",
                "ARROW"
            ],
            [
                "self",
                "IDENTIFIER"
            ],
            [
                ".",
                "DOT"
            ],
            [
                "y",
                "IDENTIFIER"
            ],
            [
                ":=",
                "DASSIGN"
            ],
            [
                "y",
                "IDENTIFIER"
            ],
            [
                ";",
                "SEMICOLON"
            ],
            [
                "}",
                "BRACE_CLOSE"
            ],
            [
                "$",
                "EOF"
            ]
        ]
    },
    "\n        let pt = new Point() in\n            print(\"x: \" @ pt.getX() @ \"; y: \" @ pt.getY());\n        ": {
        "description": "Instanciaci\u00f3n de un tipo.",
        "code": "\n        let pt = new Point() in\n            print(\"x: \" @ pt.getX() @ \"; y: \" @ pt.getY());\n        ",
        "expected_tokens": [
            [
                "let",
                "LET_KEYWORD"
            ],
            [
                "pt",
                "IDENTIFIER"
            ],
            [
                "=",
                "ASSIGN"
            ],
            [
                "new",
                "NEW_KEYWORD"
            ],
            [
                "Point",
                "IDENTIFIER"
            ],
            [
                "(",
                "PAREN_OPEN"
            ],
            [
                ")",
                "PAREN_CLOSE"
            ],
            [
                "in",
                "IN_KEYWORD"
            ],
            [
                "print",
                "IDENTIFIER"
            ],
            [
                "(",
                "PAREN_OPEN"
            ],
            [
                "\"x: \"",
                "STRING_LITERAL"
            ],
            [
                "@",
                "AT_SYMBOL"
            ],
            [
                "pt",
                "IDENTIFIER"
            ],
            [
                ".",
                "DOT"
            ],
            [
                "getX",
                "IDENTIFIER"
            ],
            [
                "(",
                "PAREN_OPEN"
            ],
            [
                ")",
                "PAREN_CLOSE"
            ],
            [
                "@",
                "AT_SYMBOL"
            ],
            [
                "\"; y: \"",
                "STRING_LITERAL"
            ],
            [
                "@",
                "AT_SYMBOL"
            ],
            [
                "pt",
                "IDENTIFIER"
            ],
            [
                ".",
                "DOT"
            ],
            [
                "getY",
                "IDENTIFIER"
            ],
            [
                "(",
                "PAREN_OPEN"
            ],
            [
                ")",
                "PAREN_CLOSE"
            ],
            [
                ")",
                "PAREN_CLOSE"
            ],
            [
                ";",
                "SEMICOLON"
            ],
            [
                "$",
                "EOF"
            ]
        ]
    },
    "\n        type Knight inherits Person {\n            name() => \"Sir\" @@ base();\n        }\n\n        let p = new Knight(\"Phil\", \"Collins\") in\n            print(p.name());\n        ": {
        "description": "Herencia de un tipo.",
        "code": "\n        type Knight inherits Person {\n            name() => \"Sir\" @@ base();\n        }\n\n        let p = new Knight(\"Phil\", \"Collins\") in\n            print(p.name());\n        ",
        "expected_tokens": [
            [
                "type",
                "TYPE_KEYWORD"
            ],
            [
                "Knight",
                "IDENTIFIER"
            ],
            [
                "inherits",
                "INHERITS_KEYWORD"
            ],
            [
                "Person",
                "IDENTIFIER"
            ],
            [
                "{",
                "BRACE_OPEN"
            ],
            [
                "name",
                "IDENTIFIER"
            ],
            [
                "(",
                "PAREN_OPEN"
            ],
            [
                ")",
                "PAREN_CLOSE"
            ],
            [
                "=>",
                "ARROW"
            ],
            [
                "\"Sir\"",
                "STRING_LITERAL"
            ],
            [
                "@@",
                "AT_AT_SYMBOL"
            ],
            [
                "base",
                "IDENTIFIER"
            ],
            [
                "(",
                "PAREN_OPEN"
            ],
            [
                ")",
                "PAREN_CLOSE"
            ],
            [
                ";",
                "SEMICOLON"
            ],
            [
                "}",
                "BRACE_CLOSE"
            ],
            [
                "let",
                "LET_KEYWORD"
            ],
            [
                "p",
                "IDENTIFIER"
            ],
            [
                "=",
                "ASSIGN"
            ],
            [
                "new",
                "NEW_KEYWORD"
            ],
            [
                "Knight",
                "IDENTIFIER"
            ],
            [
                "(",
                "PAREN_OPEN"
            ],
            [
                "\"Phil\"",
                "STRING_LITERAL"
            ],
            [
                ",",
                "COMMA"
            ],
            [
                "\"Collins\"",
                "STRING_LITERAL"
            ],
            [
                ")",
                "PAREN_CLOSE"
            ],
            [
                "in",
                "IN_KEYWORD"
            ],
            [
                "print",
                "IDENTIFIER"
            ],
            [
                "(",
                "PAREN_OPEN"
            ],
            [
                "p",
                "IDENTIFIER"
            ],
            [
                ".",
                "DOT"
            ],
            [
                "name",
                "IDENTIFIER"
            ],
            [
                "(",
                "PAREN_OPEN"
            ],
            [
                ")",
                "PAREN_CLOSE"
            ],
            [
                ")",
                "PAREN_CLOSE"
            ],
            [
                ";",
                "SEMICOLON"
            ],
            [
                "$",
                "EOF"
            ]
        ]
    },
    "\n        type Point(x, y) {\n            x = x;\n            y = y;\n        }\n\n        let pt = new Point(3, 4) in\n            print(\"x: \" @ pt.getX() @ \"; y: \" @ pt.getY());\n        ": {
        "description": "Instanciaci\u00f3n de un tipo con argumentos.",
        "code": "\n        type Point(x, y) {\n            x = x;\n            y = y;\n        }\n\n        let pt = new Point(3, 4) in\n            print(\"x: \" @ pt.getX() @ \"; y: \" @ pt.getY());\n        ",
        "expected_tokens": [
            [
                "type",
                "TYPE_KEYWORD"
            ],
            [
                "Point",
                "IDENTIFIER"
            ],
            [
                "(",
                "PAREN_OPEN"
            ],
            [
                "x",
                "IDENTIFIER"
            ],
            [
                ",",
                "COMMA"
            ],
            [
                "y",
                "IDENTIFIER"
            ],
            [
                ")",
                "PAREN_CLOSE"
            ],
            [
                "{",
                "BRACE_OPEN"
            ],
            [
                "x",
                "IDENTIFIER"
            ],
            [
                "=",
                "ASSIGN"
            ],
            [
                "x",
                "IDENTIFIER"
            ],
            [
                ";",
                "SEMICOLON"
            ],
            [
                "y",
                "IDENTIFIER"
            ],
            [
                "=",
                "ASSIGN"
            ],
            [
                "y",
                "IDENTIFIER"
            ],
            [
                ";",
                "SEMICOLON"
            ],
            [
                "}",
                "BRACE_CLOSE"
            ],
            [
                "let",
                "LET_KEYWORD"
            ],
            [
                "pt",
                "IDENTIFIER"
            ],
            [
                "=",
                "ASSIGN"
            ],
            [
                "new",
                "NEW_KEYWORD"
            ],
            [
                "Point",
                "IDENTIFIER"
            ],
            [
                "(",
                "PAREN_OPEN"
            ],
            [
                "3",
                "NUMBER_LITERAL"
            ],
            [
                ",",
                "COMMA"
            ],
            [
                "4",
                "NUMBER_LITERAL"
            ],
            [
                ")",
                "PAREN_CLOSE"
            ],
            [
                "in",
                "IN_KEYWORD"
            ],
            [
                "print",
                "IDENTIFIER"
            ],
            [
                "(",
                "PAREN_OPEN"
            ],
            [
                "\"x: \"",
                "STRING_LITERAL"
            ],
            [
                "@",
                "AT_SYMBOL"
            ],
            [
                "pt",
                "IDENTIFIER"
            ],
            [
                ".",
                "DOT"
            ],
            [
                "getX",
                "IDENTIFIER"
            ],
            [
                "(",
                "PAREN_OPEN"
            ],
            [
                ")",
                "PAREN_CLOSE"
            ],
            [
                "@",
                "AT_SYMBOL"
            ],
            [
                "\"; y: \"",
                "STRING_LITERAL"
            ],
            [
                "@",
                "AT_SYMBOL"
            ],
            [
                "pt",
                "IDENTIFIER"
            ],
            [
                ".",
                "DOT"
            ],
            [
                "getY",
                "IDENTIFIER"
            ],
            [
                "(",
                "PAREN_OPEN"
            ],
            [
                ")",
                "PAREN_CLOSE"
            ],
            [
                ")",
                "PAREN_CLOSE"
            ],
            [
                ";",
                "SEMICOLON"
            ],
            [
                "$",
                "EOF"
            ]
        ]
    },
    "\n        let x: Number = 42 in print(x);\n        ": {
        "description": "Anotaciones de tipos en variables.",
        "code": "\n        let x: Number = 42 in print(x);\n        ",
        "expected_tokens": [
            [
                "let",
                "LET_KEYWORD"
            ],
            [
                "x",
                "IDENTIFIER"
            ],
            [
                ":",
                "COLON"
            ],
            [
                "Number",
                "IDENTIFIER"
            ],
            [
                "=",
                "ASSIGN"
            ],
            [
                "42",
                "NUMBER_LITERAL"
            ],
            [
                "in",
                "IN_KEYWORD"
            ],
            [
                "print",
                "IDENTIFIER"
            ],
            [
                "(",
                "PAREN_OPEN"
            ],
            [
                "x",
                "IDENTIFIER"
            ],
            [
                ")",
                "PAREN_CLOSE"
            ],
            [
                ";",
                "SEMICOLON"
            ],
            [
                "$",
                "EOF"
            ]
        ]
    },
    "\n        function tan(x: Number): Number => sin(x) / cos(x);\n        ": {
        "description": "Anotaciones de tipos en funciones.",
        "code": "\n        function tan(x: Number): Number => sin(x) / cos(x);\n        ",
        "expected_tokens": [
            [
                "function",
                "FUNCTION_KEYWORD"
            ],
            [
                "tan",
                "IDENTIFIER"
            ],
            [
                "(",
                "PAREN_OPEN"
            ],
            [
                "x",
                "IDENTIFIER"
            ],
            [
                ":",
                "COLON"
            ],
            [
                "Number",
                "IDENTIFIER"
            ],
            [
                ")",
                "PAREN_CLOSE"
            ],
            [
                ":",
                "COLON"
            ],
            [
                "Number",
                "IDENTIFIER"
            ],
            [
                "=>",
                "ARROW"
            ],
            [
                "sin",
                "IDENTIFIER"
            ],
            [
                "(",
                "PAREN_OPEN"
            ],
            [
                "x",
                "IDENTIFIER"
            ],
            [
                ")",
                "PAREN_CLOSE"
            ],
            [
                "/",
                "DIVIDE"
            ],
            [
                "cos",
                "IDENTIFIER"
            ],
            [
                "(",
                "PAREN_OPEN"
            ],
            [
                "x",
                "IDENTIFIER"
            ],
            [
                ")",
                "PAREN_CLOSE"
            ],
            [
                ";",
                "SEMICOLON"
            ],
            [
                "$",
                "EOF"
            ]
        ]
    },
    "\n        type Point(x: Number, y: Number) {\n            x: Number = x;\n            y: Number = y;\n        }\n        ": {
        "description": "Anotaciones de tipos en atributos.",
        "code": "\n        type Point(x: Number, y: Number) {\n            x: Number = x;\n            y: Number = y;\n        }\n        ",
        "expected_tokens": [
            [
                "type",
                "TYPE_KEYWORD"
            ],
            [
                "Point",
                "IDENTIFIER"
            ],
            [
                "(",
                "PAREN_OPEN"
            ],
            [
                "x",
                "IDENTIFIER"
            ],
            [
                ":",
                "COLON"
            ],
            [
                "Number",
                "IDENTIFIER"
            ],
            [
                ",",
                "COMMA"
            ],
            [
                "y",
                "IDENTIFIER"
            ],
            [
                ":",
                "COLON"
            ],
            [
                "Number",
                "IDENTIFIER"
            ],
            [
                ")",
                "PAREN_CLOSE"
            ],
            [
                "{",
                "BRACE_OPEN"
            ],
            [
                "x",
                "IDENTIFIER"
            ],
            [
                ":",
                "COLON"
            ],
            [
                "Number",
                "IDENTIFIER"
            ],
            [
                "=",
                "ASSIGN"
            ],
            [
                "x",
                "IDENTIFIER"
            ],
            [
                ";",
                "SEMICOLON"
            ],
            [
                "y",
                "IDENTIFIER"
            ],
            [
                ":",
                "COLON"
            ],
            [
                "Number",
                "IDENTIFIER"
            ],
            [
                "=",
                "ASSIGN"
            ],
            [
                "y",
                "IDENTIFIER"
            ],
            [
                ";",
                "SEMICOLON"
            ],
            [
                "}",
                "BRACE_CLOSE"
            ],
            [
                "$",
                "EOF"
            ]
        ]
    },
    "\n        type Animal {}\n        type Dog inherits Animal {}\n        let a: Animal = new Dog();\n        ": {
        "description": "Verificaci\u00f3n de conformidad de tipos.",
        "code": "\n        type Animal {}\n        type Dog inherits Animal {}\n        let a: Animal = new Dog();\n        ",
        "expected_tokens": [
            [
                "type",
                "TYPE_KEYWORD"
            ],
            [
                "Animal",
                "IDENTIFIER"
            ],
            [
                "{",
                "BRACE_OPEN"
            ],
            [
                "}",
                "BRACE_CLOSE"
            ],
            [
                "type",
                "TYPE_KEYWORD"
            ],
            [
                "Dog",
                "IDENTIFIER"
            ],
            [
                "inherits",
                "INHERITS_KEYWORD"
            ],
            [
                "Animal",
                "IDENTIFIER"
            ],
            [
                "{",
                "BRACE_OPEN"
            ],
            [
                "}",
                "BRACE_CLOSE"
            ],
            [
                "let",
                "LET_KEYWORD"
            ],
            [
                "a",
                "IDENTIFIER"
            ],
            [
                ":",
                "COLON"
            ],
            [
                "Animal",
                "IDENTIFIER"
            ],
            [
                "=",
                "ASSIGN"
            ],
            [
                "new",
                "NEW_KEYWORD"
            ],
            [
                "Dog",
                "IDENTIFIER"
            ],
            [
                "(",
                "PAREN_OPEN"
            ],
            [
                ")",
                "PAREN_CLOSE"
            ],
            [
                ";",
                "SEMICOLON"
            ],
            [
                "$",
                "EOF"
            ]
        ]
    },
    "\n        type Bird {}\n        type Plane {}\n        type Superman {}\n\n        let x = new Superman() in\n            print(\n                if (x is Bird) \"It's bird!\"\n                elif (x is Plane) \"It's a plane!\"\n                else \"No, it's Superman!\"\n            );\n        ": {
        "description": "Verificaci\u00f3n din\u00e1mica de tipos.",
        "code": "\n        type Bird {}\n        type Plane {}\n        type Superman {}\n\n        let x = new Superman() in\n            print(\n                if (x is Bird) \"It's bird!\"\n                elif (x is Plane) \"It's a plane!\"\n                else \"No, it's Superman!\"\n            );\n        ",
        "expected_tokens": [
            [
                "type",
                "TYPE_KEYWORD"
            ],
            [
                "Bird",
                "IDENTIFIER"
            ],
            [
                "{",
                "BRACE_OPEN"
            ],
            [
                "}",
                "BRACE_CLOSE"
            ],
            [
                "type",
                "TYPE_KEYWORD"
            ],
            [
                "Plane",
                "IDENTIFIER"
            ],
            [
                "{",
                "BRACE_OPEN"
            ],
            [
                "}",
                "BRACE_CLOSE"
            ],
            [
                "type",
                "TYPE_KEYWORD"
            ],
            [
                "Superman",
                "IDENTIFIER"
            ],
            [
                "{",
                "BRACE_OPEN"
            ],
            [
                "}",
                "BRACE_CLOSE"
            ],
            [
                "let",
                "LET_KEYWORD"
            ],
            [
                "x",
                "IDENTIFIER"
            ],
            [
                "=",
                "ASSIGN"
            ],
            [
                "new",
                "NEW_KEYWORD"
            ],
            [
                "Superman",
                "IDENTIFIER"
            ],
            [
                "(",
                "PAREN_OPEN"
            ],
            [
                ")",
                "PAREN_CLOSE"
            ],
            [
                "in",
                "IN_KEYWORD"
            ],
            [
                "print",
                "IDENTIFIER"
            ],
            [
                "(",
                "PAREN_OPEN"
            ],
            [
                "if",
                "IF_KEYWORD"
            ],
            [
                "(",
                "PAREN_OPEN"
            ],
            [
                "x",
                "IDENTIFIER"
            ],
            [
                "is",
                "IS_KEYWORD"
            ],
            [
                "Bird",
                "IDENTIFIER"
            ],
            [
                ")",
                "PAREN_CLOSE"
            ],
            [
                "\"It's bird!\"",
                "STRING_LITERAL"
            ],
            [
                "elif",
                "ELIF_KEYWORD"
            ],
            [
                "(",
                "PAREN_OPEN"
            ],
            [
                "x",
                "IDENTIFIER"
            ],
            [
                "is",
                "IS_KEYWORD"
            ],
            [
                "Plane",
                "IDENTIFIER"
            ],
            [
                ")",
                "PAREN_CLOSE"
            ],
            [
                "\"It's a plane!\"",
                "STRING_LITERAL"
            ],
            [
                "else",
                "ELSE_KEYWORD"
            ],
            [
                "\"No, it's Superman!\"",
                "STRING_LITERAL"
            ],
            [
                ")",
                "PAREN_CLOSE"
            ],
            [
                ";",
                "SEMICOLON"
            ],
            [
                "$",
                "EOF"
            ]
        ]
    },
    "\n        type A {}\n        type B inherits A {}\n        type C inherits A {}\n\n        let x: A = if (rand() < 0.5) new B() else new C() in\n            if (x is B)\n                let y: B = x as B in {\n                    print(y);\n                }\n            else {\n                print(\"Cannot downcast to B\");\n            }\n        ": {
        "description": "Prueba de downcasting.",
        "code": "\n        type A {}\n        type B inherits A {}\n        type C inherits A {}\n\n        let x: A = if (rand() < 0.5) new B() else new C() in\n            if (x is B)\n                let y: B = x as B in {\n                    print(y);\n                }\n            else {\n                print(\"Cannot downcast to B\");\n            }\n        ",
        "expected_tokens": [
            [
                "type",
                "TYPE_KEYWORD"
            ],
            [
                "A",
                "IDENTIFIER"
            ],
            [
                "{",
                "BRACE_OPEN"
            ],
            [
                "}",
                "BRACE_CLOSE"
            ],
            [
                "type",
                "TYPE_KEYWORD"
            ],
            [
                "B",
                "IDENTIFIER"
            ],
            [
                "inherits",
                "INHERITS_KEYWORD"
            ],
            [
                "A",
                "IDENTIFIER"
            ],
            [
                "{",
                "BRACE_OPEN"
            ],
            [
                "}",
                "BRACE_CLOSE"
            ],
            [
                "type",
                "TYPE_KEYWORD"
            ],
            [
                "C",
                "IDENTIFIER"
            ],
            [
                "inherits",
                "INHERITS_KEYWORD"
            ],
            [
                "A",
                "IDENTIFIER"
            ],
            [
                "{",
                "BRACE_OPEN"
            ],
            [
                "}",
                "BRACE_CLOSE"
            ],
            [
                "let",
                "LET_KEYWORD"
            ],
            [
                "x",
                "IDENTIFIER"
            ],
            [
                ":",
                "COLON"
            ],
            [
                "A",
                "IDENTIFIER"
            ],
            [
                "=",
                "ASSIGN"
            ],
            [
                "if",
                "IF_KEYWORD"
            ],
            [
                "(",
                "PAREN_OPEN"
            ],
            [
                "rand",
                "IDENTIFIER"
            ],
            [
                "(",
                "PAREN_OPEN"
            ],
            [
                ")",
                "PAREN_CLOSE"
            ],
            [
                "<",
                "LESS_THAN"
            ],
            [
                "0.5",
                "NUMBER_LITERAL"
            ],
            [
                ")",
                "PAREN_CLOSE"
            ],
            [
                "new",
                "NEW_KEYWORD"
            ],
            [
                "B",
                "IDENTIFIER"
            ],
            [
                "(",
                "PAREN_OPEN"
            ],
            [
                ")",
                "PAREN_CLOSE"
            ],
            [
                "else",
                "ELSE_KEYWORD"
            ],
            [
                "new",
                "NEW_KEYWORD"
            ],
            [
                "C",
                "IDENTIFIER"
            ],
            [
                "(",
                "PAREN_OPEN"
            ],
            [
                ")",
                "PAREN_CLOSE"
            ],
            [
                "in",
                "IN_KEYWORD"
            ],
            [
                "if",
                "IF_KEYWORD"
            ],
            [
                "(",
                "PAREN_OPEN"
            ],
            [
                "x",
                "IDENTIFIER"
            ],
            [
                "is",
                "IS_KEYWORD"
            ],
            [
                "B",
                "IDENTIFIER"
            ],
            [
                ")",
                "PAREN_CLOSE"
            ],
            [
                "let",
                "LET_KEYWORD"
            ],
            [
                "y",
                "IDENTIFIER"
            ],
            [
                ":",
                "COLON"
            ],
            [
                "B",
                "IDENTIFIER"
            ],
            [
                "=",
                "ASSIGN"
            ],
            [
                "x",
                "IDENTIFIER"
            ],
            [
                "as",
                "AS_KEYWORD"
            ],
            [
                "B",
                "IDENTIFIER"
            ],
            [
                "in",
                "IN_KEYWORD"
            ],
            [
                "{",
                "BRACE_OPEN"
            ],
            [
                "print",
                "IDENTIFIER"
            ],
            [
                "(",
                "PAREN_OPEN"
            ],
            [
                "y",
                "IDENTIFIER"
            ],
            [
                ")",
                "PAREN_CLOSE"
            ],
            [
                ";",
                "SEMICOLON"
            ],
            [
                "}",
                "BRACE_CLOSE"
            ],
            [
                "else",
                "ELSE_KEYWORD"
            ],
            [
                "{",
                "BRACE_OPEN"
            ],
            [
                "print",
                "IDENTIFIER"
            ],
            [
                "(",
                "PAREN_OPEN"
            ],
            [
                "\"Cannot downcast to B\"",
                "STRING_LITERAL"
            ],
            [
                ")",
                "PAREN_CLOSE"
            ],
            [
                ";",
                "SEMICOLON"
            ],
            [
                "}",
                "BRACE_CLOSE"
            ],
            [
                "$",
                "EOF"
            ]
        ]
    },
    "\n        protocol Hashable {\n            hash(): Number;\n        }\n        ": {
        "description": "Definici\u00f3n de protocolos.",
        "code": "\n        protocol Hashable {\n            hash(): Number;\n        }\n        ",
        "expected_tokens": [
            [
                "protocol",
                "PROTOCOL_KEYWORD"
            ],
            [
                "Hashable",
                "IDENTIFIER"
            ],
            [
                "{",
                "BRACE_OPEN"
            ],
            [
                "hash",
                "IDENTIFIER"
            ],
            [
                "(",
                "PAREN_OPEN"
            ],
            [
                ")",
                "PAREN_CLOSE"
            ],
            [
                ":",
                "COLON"
            ],
            [
                "Number",
                "IDENTIFIER"
            ],
            [
                ";",
                "SEMICOLON"
            ],
            [
                "}",
                "BRACE_CLOSE"
            ],
            [
                "$",
                "EOF"
            ]
        ]
    },
    "\n        protocol Equatable extends Hashable {\n            equals(other: Object): Boolean;\n        }\n        ": {
        "description": "Extensi\u00f3n de protocolos.",
        "code": "\n        protocol Equatable extends Hashable {\n            equals(other: Object): Boolean;\n        }\n        ",
        "expected_tokens": [
            [
                "protocol",
                "PROTOCOL_KEYWORD"
            ],
            [
                "Equatable",
                "IDENTIFIER"
            ],
            [
                "extends",
                "EXTENDS_KEYWORD"
            ],
            [
                "Hashable",
                "IDENTIFIER"
            ],
            [
                "{",
                "BRACE_OPEN"
            ],
            [
                "equals",
                "IDENTIFIER"
            ],
            [
                "(",
                "PAREN_OPEN"
            ],
            [
                "other",
                "IDENTIFIER"
            ],
            [
                ":",
                "COLON"
            ],
            [
                "Object",
                "IDENTIFIER"
            ],
            [
                ")",
                "PAREN_CLOSE"
            ],
            [
                ":",
                "COLON"
            ],
            [
                "Boolean",
                "IDENTIFIER"
            ],
            [
                ";",
                "SEMICOLON"
            ],
            [
                "}",
                "BRACE_CLOSE"
            ],
            [
                "$",
                "EOF"
            ]
        ]
    },
    "\n        type Person {\n            hash() : Number {\n                42;\n            }\n        }\n\n        let x : Hashable = new Person() in print(x.hash());\n        ": {
        "description": "Implementaci\u00f3n de protocolos.",
        "code": "\n        type Person {\n            hash() : Number {\n                42;\n            }\n        }\n\n        let x : Hashable = new Person() in print(x.hash());\n        ",
        "expected_tokens": [
            [
                "type",
                "TYPE_KEYWORD"
            ],
            [
                "Person",
                "IDENTIFIER"
            ],
            [
                "{",
                "BRACE_OPEN"
            ],
            [
                "hash",
                "IDENTIFIER"
            ],
            [
                "(",
                "PAREN_OPEN"
            ],
            [
                ")",
                "PAREN_CLOSE"
            ],
            [
                ":",
                "COLON"
            ],
            [
                "Number",
                "IDENTIFIER"
            ],
            [
                "{",
                "BRACE_OPEN"
            ],
            [
                "42",
                "NUMBER_LITERAL"
            ],
            [
                ";",
                "SEMICOLON"
            ],
            [
                "}",
                "BRACE_CLOSE"
            ],
            [
                "}",
                "BRACE_CLOSE"
            ],
            [
                "let",
                "LET_KEYWORD"
            ],
            [
                "x",
                "IDENTIFIER"
            ],
            [
                ":",
                "COLON"
            ],
            [
                "Hashable",
                "IDENTIFIER"
            ],
            [
                "=",
                "ASSIGN"
            ],
            [
                "new",
                "NEW_KEYWORD"
            ],
            [
                "Person",
                "IDENTIFIER"
            ],
            [
                "(",
                "PAREN_OPEN"
            ],
            [
                ")",
                "PAREN_CLOSE"
            ],
            [
                "in",
                "IN_KEYWORD"
            ],
            [
                "print",
                "IDENTIFIER"
            ],
            [
                "(",
                "PAREN_OPEN"
            ],
            [
                "x",
                "IDENTIFIER"
            ],
            [
                ".",
                "DOT"
            ],
            [
                "hash",
                "IDENTIFIER"
            ],
            [
                "(",
                "PAREN_OPEN"
            ],
            [
                ")",
                "PAREN_CLOSE"
            ],
            [
                ")",
                "PAREN_CLOSE"
            ],
            [
                ";",
                "SEMICOLON"
            ],
            [
                "$",
                "EOF"
            ]
        ]
    },
    "\n        protocol Comparator {\n            compare(other: Object): Boolean;\n        }\n\n        type Person {\n            compare(other: Person): Boolean {\n                true;\n            }\n        }\n\n        let p1: Comparator = new Person();\n        ": {
        "description": "Varianza de protocolos.",
        "code": "\n        protocol Comparator {\n            compare(other: Object): Boolean;\n        }\n\n        type Person {\n            compare(other: Person): Boolean {\n                true;\n            }\n        }\n\n        let p1: Comparator = new Person();\n        ",
        "expected_tokens": [
            [
                "protocol",
                "PROTOCOL_KEYWORD"
            ],
            [
                "Comparator",
                "IDENTIFIER"
            ],
            [
                "{",
                "BRACE_OPEN"
            ],
            [
                "compare",
                "IDENTIFIER"
            ],
            [
                "(",
                "PAREN_OPEN"
            ],
            [
                "other",
                "IDENTIFIER"
            ],
            [
                ":",
                "COLON"
            ],
            [
                "Object",
                "IDENTIFIER"
            ],
            [
                ")",
                "PAREN_CLOSE"
            ],
            [
                ":",
                "COLON"
            ],
            [
                "Boolean",
                "IDENTIFIER"
            ],
            [
                ";",
                "SEMICOLON"
            ],
            [
                "}",
                "BRACE_CLOSE"
            ],
            [
                "type",
                "TYPE_KEYWORD"
            ],
            [
                "Person",
                "IDENTIFIER"
            ],
            [
                "{",
                "BRACE_OPEN"
            ],
            [
                "compare",
                "IDENTIFIER"
            ],
            [
                "(",
                "PAREN_OPEN"
            ],
            [
                "other",
                "IDENTIFIER"
            ],
            [
                ":",
                "COLON"
            ],
            [
                "Person",
                "IDENTIFIER"
            ],
            [
                ")",
                "PAREN_CLOSE"
            ],
            [
                ":",
                "COLON"
            ],
            [
                "Boolean",
                "IDENTIFIER"
            ],
            [
                "{",
                "BRACE_OPEN"
            ],
            [
                "true",
                "TRUE_KEYWORD"
            ],
            [
                ";",
                "SEMICOLON"
            ],
            [
                "}",
                "BRACE_CLOSE"
            ],
            [
                "}",
                "BRACE_CLOSE"
            ],
            [
                "let",
                "LET_KEYWORD"
            ],
            [
                "p1",
                "IDENTIFIER"
            ],
            [
                ":",
                "COLON"
            ],
            [
                "Comparator",
                "IDENTIFIER"
            ],
            [
                "=",
                "ASSIGN"
            ],
            [
                "new",
                "NEW_KEYWORD"
            ],
            [
                "Person",
                "IDENTIFIER"
            ],
            [
                "(",
                "PAREN_OPEN"
            ],
            [
                ")",
                "PAREN_CLOSE"
            ],
            [
                ";",
                "SEMICOLON"
            ],
            [
                "$",
                "EOF"
            ]
        ]
    },
    "\n        protocol Hashable {\n            hash(): Number;\n        }\n\n        type Person {\n            hash() : Number {\n                42;\n            }\n        }\n\n        let x: Hashable = new Person() in print(x.hash());\n        ": {
        "description": "Conformidad de protocolos.",
        "code": "\n        protocol Hashable {\n            hash(): Number;\n        }\n\n        type Person {\n            hash() : Number {\n                42;\n            }\n        }\n\n        let x: Hashable = new Person() in print(x.hash());\n        ",
        "expected_tokens": [
            [
                "protocol",
                "PROTOCOL_KEYWORD"
            ],
            [
                "Hashable",
                "IDENTIFIER"
            ],
            [
                "{",
                "BRACE_OPEN"
            ],
            [
                "hash",
                "IDENTIFIER"
            ],
            [
                "(",
                "PAREN_OPEN"
            ],
            [
                ")",
                "PAREN_CLOSE"
            ],
            [
                ":",
                "COLON"
            ],
            [
                "Number",
                "IDENTIFIER"
            ],
            [
                ";",
                "SEMICOLON"
            ],
            [
                "}",
                "BRACE_CLOSE"
            ],
            [
                "type",
                "TYPE_KEYWORD"
            ],
            [
                "Person",
                "IDENTIFIER"
            ],
            [
                "{",
                "BRACE_OPEN"
            ],
            [
                "hash",
                "IDENTIFIER"
            ],
            [
                "(",
                "PAREN_OPEN"
            ],
            [
                ")",
                "PAREN_CLOSE"
            ],
            [
                ":",
                "COLON"
            ],
            [
                "Number",
                "IDENTIFIER"
            ],
            [
                "{",
                "BRACE_OPEN"
            ],
            [
                "42",
                "NUMBER_LITERAL"
            ],
            [
                ";",
                "SEMICOLON"
            ],
            [
                "}",
                "BRACE_CLOSE"
            ],
            [
                "}",
                "BRACE_CLOSE"
            ],
            [
                "let",
                "LET_KEYWORD"
            ],
            [
                "x",
                "IDENTIFIER"
            ],
            [
                ":",
                "COLON"
            ],
            [
                "Hashable",
                "IDENTIFIER"
            ],
            [
                "=",
                "ASSIGN"
            ],
            [
                "new",
                "NEW_KEYWORD"
            ],
            [
                "Person",
                "IDENTIFIER"
            ],
            [
                "(",
                "PAREN_OPEN"
            ],
            [
                ")",
                "PAREN_CLOSE"
            ],
            [
                "in",
                "IN_KEYWORD"
            ],
            [
                "print",
                "IDENTIFIER"
            ],
            [
                "(",
                "PAREN_OPEN"
            ],
            [
                "x",
                "IDENTIFIER"
            ],
            [
                ".",
                "DOT"
            ],
            [
                "hash",
                "IDENTIFIER"
            ],
            [
                "(",
                "PAREN_OPEN"
            ],
            [
                ")",
                "PAREN_CLOSE"
            ],
            [
                ")",
                "PAREN_CLOSE"
            ],
            [
                ";",
                "SEMICOLON"
            ],
            [
                "$",
                "EOF"
            ]
        ]
    },
    "\n        protocol Iterable {\n            next(): Boolean;\n            current(): Object;\n        }\n        ": {
        "description": "Definici\u00f3n del protocolo Iterable.",
        "code": "\n        protocol Iterable {\n            next(): Boolean;\n            current(): Object;\n        }\n        ",
        "expected_tokens": [
            [
                "protocol",
                "PROTOCOL_KEYWORD"
            ],
            [
                "Iterable",
                "IDENTIFIER"
            ],
            [
                "{",
                "BRACE_OPEN"
            ],
            [
                "next",
                "IDENTIFIER"
            ],
            [
                "(",
                "PAREN_OPEN"
            ],
            [
                ")",
                "PAREN_CLOSE"
            ],
            [
                ":",
                "COLON"
            ],
            [
                "Boolean",
                "IDENTIFIER"
            ],
            [
                ";",
                "SEMICOLON"
            ],
            [
                "current",
                "IDENTIFIER"
            ],
            [
                "(",
                "PAREN_OPEN"
            ],
            [
                ")",
                "PAREN_CLOSE"
            ],
            [
                ":",
                "COLON"
            ],
            [
                "Object",
                "IDENTIFIER"
            ],
            [
                ";",
                "SEMICOLON"
            ],
            [
                "}",
                "BRACE_CLOSE"
            ],
            [
                "$",
                "EOF"
            ]
        ]
    },
    "\n        type Range(min: Number, max: Number) {\n            min = min;\n            max = max;\n            current = min - 1;\n\n            next(): Boolean => (self.current := self.current + 1) < max;\n            current(): Number => self.current;\n        }\n\n        let r = new Range(0, 10) in print(r.current());\n        ": {
        "description": "Implementaci\u00f3n del tipo Range.",
        "code": "\n        type Range(min: Number, max: Number) {\n            min = min;\n            max = max;\n            current = min - 1;\n\n            next(): Boolean => (self.current := self.current + 1) < max;\n            current(): Number => self.current;\n        }\n\n        let r = new Range(0, 10) in print(r.current());\n        ",
        "expected_tokens": [
            [
                "type",
                "TYPE_KEYWORD"
            ],
            [
                "Range",
                "IDENTIFIER"
            ],
            [
                "(",
                "PAREN_OPEN"
            ],
            [
                "min",
                "IDENTIFIER"
            ],
            [
                ":",
                "COLON"
            ],
            [
                "Number",
                "IDENTIFIER"
            ],
            [
                ",",
                "COMMA"
            ],
            [
                "max",
                "IDENTIFIER"
            ],
            [
                ":",
                "COLON"
            ],
            [
                "Number",
                "IDENTIFIER"
            ],
            [
                ")",
                "PAREN_CLOSE"
            ],
            [
                "{",
                "BRACE_OPEN"
            ],
            [
                "min",
                "IDENTIFIER"
            ],
            [
                "=",
                "ASSIGN"
            ],
            [
                "min",
                "IDENTIFIER"
            ],
            [
                ";",
                "SEMICOLON"
            ],
            [
                "max",
                "IDENTIFIER"
            ],
            [
                "=",
                "ASSIGN"
            ],
            [
                "max",
                "IDENTIFIER"
            ],
            [
                ";",
                "SEMICOLON"
            ],
            [
                "current",
                "IDENTIFIER"
            ],
            [
                "=",
                "ASSIGN"
            ],
            [
                "min",
                "IDENTIFIER"
            ],
            [
                "-",
                "MINUS"
            ],
            [
                "1",
                "NUMBER_LITERAL"
            ],
            [
                ";",
                "SEMICOLON"
            ],
            [
                "next",
                "IDENTIFIER"
            ],
            [
                "(",
                "PAREN_OPEN"
            ],
            [
                ")",
                "PAREN_CLOSE"
            ],
            [
                ":",
                "COLON"
            ],
            [
                "Boolean",
                "IDENTIFIER"
            ],
            [
                "=>",
                "ARROW"
            ],
            [
                "(",
                "PAREN_OPEN"
            ],
            [
                "self",
                "IDENTIFIER"
            ],
            [
                ".",
                "DOT"
            ],
            [
                "current",
                "IDENTIFIER"
            ],
            [
                ":=",
                "DASSIGN"
            ],
            [
                "self",
                "IDENTIFIER"
            ],
            [
                ".",
                "DOT"
            ],
            [
                "current",
                "IDENTIFIER"
            ],
            [
                "+",
                "PLUS"
            ],
            [
                "1",
                "NUMBER_LITERAL"
            ],
            [
                ")",
                "PAREN_CLOSE"
            ],
            [
                "<",
                "LESS_THAN"
            ],
            [
                "max",
                "IDENTIFIER"
            ],
            [
                ";",
                "SEMICOLON"
            ],
            [
                "current",
                "IDENTIFIER"
            ],
            [
                "(",
                "PAREN_OPEN"
            ],
            [
                ")",
                "PAREN_CLOSE"
            ],
            [
                ":",
                "COLON"
            ],
            [
                "Number",
                "IDENTIFIER"
            ],
            [
                "=>",
                "ARROW"
            ],
            [
                "self",
                "IDENTIFIER"
            ],
            [
                ".",
                "DOT"
            ],
            [
                "current",
                "IDENTIFIER"
            ],
            [
                ";",
                "SEMICOLON"
            ],
            [
                "}",
                "BRACE_CLOSE"
            ],
            [
                "let",
                "LET_KEYWORD"
            ],
            [
                "r",
                "IDENTIFIER"
            ],
            [
                "=",
                "ASSIGN"
            ],
            [
                "new",
                "NEW_KEYWORD"
            ],
            [
                "Range",
                "IDENTIFIER"
            ],
            [
                "(",
                "PAREN_OPEN"
            ],
            [
                "0",
                "NUMBER_LITERAL"
            ],
            [
                ",",
                "COMMA"
            ],
            [
                "10",
                "NUMBER_LITERAL"
            ],
            [
                ")",
                "PAREN_CLOSE"
            ],
            [
                "in",
                "IN_KEYWORD"
            ],
            [
                "print",
                "IDENTIFIER"
            ],
            [
                "(",
                "PAREN_OPEN"
            ],
            [
                "r",
                "IDENTIFIER"
            ],
            [
                ".",
                "DOT"
            ],
            [
                "current",
                "IDENTIFIER"
            ],
            [
                "(",
                "PAREN_OPEN"
            ],
            [
                ")",
                "PAREN_CLOSE"
            ],
            [
                ")",
                "PAREN_CLOSE"
            ],
            [
                ";",
                "SEMICOLON"
            ],
            [
                "$",
                "EOF"
            ]
        ]
    },
    "\n        for (x in range(0, 10)) {\n            // code that uses `x`\n        }\n        ": {
        "description": "Iteraci\u00f3n con un ciclo `for`.",
        "code": "\n        for (x in range(0, 10)) {\n            // code that uses `x`\n        }\n        ",
        "expected_tokens": [
            [
                "for",
                "FOR_KEYWORD"
            ],
            [
                "(",
                "PAREN_OPEN"
            ],
            [
                "x",
                "IDENTIFIER"
            ],
            [
                "in",
                "IN_KEYWORD"
            ],
            [
                "range",
                "IDENTIFIER"
            ],
            [
                "(",
                "PAREN_OPEN"
            ],
            [
                "0",
                "NUMBER_LITERAL"
            ],
            [
                ",",
                "COMMA"
            ],
            [
                "10",
                "NUMBER_LITERAL"
            ],
            [
                ")",
                "PAREN_CLOSE"
            ],
            [
                ")",
                "PAREN_CLOSE"
            ],
            [
                "{",
                "BRACE_OPEN"
            ],
            [
                "}",
                "BRACE_CLOSE"
            ],
            [
                "$",
                "EOF"
            ]
        ]
    },
    "\n        function sum(numbers: Number*): Number =>\n            let total = 0 in\n                for (x in numbers)\n                    total := total + x;\n        ": {
        "description": "Anotaciones de tipos en iterables.",
        "code": "\n        function sum(numbers: Number*): Number =>\n            let total = 0 in\n                for (x in numbers)\n                    total := total + x;\n        ",
        "expected_tokens": [
            [
                "function",
                "FUNCTION_KEYWORD"
            ],
            [
                "sum",
                "IDENTIFIER"
            ],
            [
                "(",
                "PAREN_OPEN"
            ],
            [
                "numbers",
                "IDENTIFIER"
            ],
            [
                ":",
                "COLON"
            ],
            [
                "Number",
                "IDENTIFIER"
            ],
            [
                "*",
                "MULTIPLY"
            ],
            [
                ")",
                "PAREN_CLOSE"
            ],
            [
                ":",
                "COLON"
            ],
            [
                "Number",
                "IDENTIFIER"
            ],
            [
                "=>",
                "ARROW"
            ],
            [
                "let",
                "LET_KEYWORD"
            ],
            [
                "total",
                "IDENTIFIER"
            ],
            [
                "=",
                "ASSIGN"
            ],
            [
                "0",
                "NUMBER_LITERAL"
            ],
            [
                "in",
                "IN_KEYWORD"
            ],
            [
                "for",
                "FOR_KEYWORD"
            ],
            [
                "(",
                "PAREN_OPEN"
            ],
            [
                "x",
                "IDENTIFIER"
            ],
            [
                "in",
                "IN_KEYWORD"
            ],
            [
                "numbers",
                "IDENTIFIER"
            ],
            [
                ")",
                "PAREN_CLOSE"
            ],
            [
                "total",
                "IDENTIFIER"
            ],
            [
                ":=",
                "DASSIGN"
            ],
            [
                "total",
                "IDENTIFIER"
            ],
            [
                "+",
                "PLUS"
            ],
            [
                "x",
                "IDENTIFIER"
            ],
            [
                ";",
                "SEMICOLON"
            ],
            [
                "$",
                "EOF"
            ]
        ]
    },
    "\n        protocol Enumerable {\n            iter(): Iterable;\n        }\n\n        type Collection {\n            iter(): Iterable {\n                range(0, 10);\n            }\n        }\n\n        let c = new Collection() in\n            for (x in c) {\n                print(x);\n            }\n        ": {
        "description": "Protocolo `Enumerable`.",
        "code": "\n        protocol Enumerable {\n            iter(): Iterable;\n        }\n\n        type Collection {\n            iter(): Iterable {\n                range(0, 10);\n            }\n        }\n\n        let c = new Collection() in\n            for (x in c) {\n                print(x);\n            }\n        ",
        "expected_tokens": [
            [
                "protocol",
                "PROTOCOL_KEYWORD"
            ],
            [
                "Enumerable",
                "IDENTIFIER"
            ],
            [
                "{",
                "BRACE_OPEN"
            ],
            [
                "iter",
                "IDENTIFIER"
            ],
            [
                "(",
                "PAREN_OPEN"
            ],
            [
                ")",
                "PAREN_CLOSE"
            ],
            [
                ":",
                "COLON"
            ],
            [
                "Iterable",
                "IDENTIFIER"
            ],
            [
                ";",
                "SEMICOLON"
            ],
            [
                "}",
                "BRACE_CLOSE"
            ],
            [
                "type",
                "TYPE_KEYWORD"
            ],
            [
                "Collection",
                "IDENTIFIER"
            ],
            [
                "{",
                "BRACE_OPEN"
            ],
            [
                "iter",
                "IDENTIFIER"
            ],
            [
                "(",
                "PAREN_OPEN"
            ],
            [
                ")",
                "PAREN_CLOSE"
            ],
            [
                ":",
                "COLON"
            ],
            [
                "Iterable",
                "IDENTIFIER"
            ],
            [
                "{",
                "BRACE_OPEN"
            ],
            [
                "range",
                "IDENTIFIER"
            ],
            [
                "(",
                "PAREN_OPEN"
            ],
            [
                "0",
                "NUMBER_LITERAL"
            ],
            [
                ",",
                "COMMA"
            ],
            [
                "10",
                "NUMBER_LITERAL"
            ],
            [
                ")",
                "PAREN_CLOSE"
            ],
            [
                ";",
                "SEMICOLON"
            ],
            [
                "}",
                "BRACE_CLOSE"
            ],
            [
                "}",
                "BRACE_CLOSE"
            ],
            [
                "let",
                "LET_KEYWORD"
            ],
            [
                "c",
                "IDENTIFIER"
            ],
            [
                "=",
                "ASSIGN"
            ],
            [
                "new",
                "NEW_KEYWORD"
            ],
            [
                "Collection",
                "IDENTIFIER"
            ],
            [
                "(",
                "PAREN_OPEN"
            ],
            [
                ")",
                "PAREN_CLOSE"
            ],
            [
                "in",
                "IN_KEYWORD"
            ],
            [
                "for",
                "FOR_KEYWORD"
            ],
            [
                "(",
                "PAREN_OPEN"
            ],
            [
                "x",
                "IDENTIFIER"
            ],
            [
                "in",
                "IN_KEYWORD"
            ],
            [
                "c",
                "IDENTIFIER"
            ],
            [
                ")",
                "PAREN_CLOSE"
            ],
            [
                "{",
                "BRACE_OPEN"
            ],
            [
                "print",
                "IDENTIFIER"
            ],
            [
                "(",
                "PAREN_OPEN"
            ],
            [
                "x",
                "IDENTIFIER"
            ],
            [
                ")",
                "PAREN_CLOSE"
            ],
            [
                ";",
                "SEMICOLON"
            ],
            [
                "}",
                "BRACE_CLOSE"
            ],
            [
                "$",
                "EOF"
            ]
        ]
    },
    "\n        let numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9] in\n            for (x in numbers)\n                print(x);\n        ": {
        "description": "Sintaxis expl\u00edcita de vectores.",
        "code": "\n        let numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9] in\n            for (x in numbers)\n                print(x);\n        ",
        "expected_tokens": [
            [
                "let",
                "LET_KEYWORD"
            ],
            [
                "numbers",
                "IDENTIFIER"
            ],
            [
                "=",
                "ASSIGN"
            ],
            [
                "[",
                "SQUARE_BRACKET_OPEN"
            ],
            [
                "1",
                "NUMBER_LITERAL"
            ],
            [
                ",",
                "COMMA"
            ],
            [
                "2",
                "NUMBER_LITERAL"
            ],
            [
                ",",
                "COMMA"
            ],
            [
                "3",
                "NUMBER_LITERAL"
            ],
            [
                ",",
                "COMMA"
            ],
            [
                "4",
                "NUMBER_LITERAL"
            ],
            [
                ",",
                "COMMA"
            ],
            [
                "5",
                "NUMBER_LITERAL"
            ],
            [
                ",",
                "COMMA"
            ],
            [
                "6",
                "NUMBER_LITERAL"
            ],
            [
                ",",
                "COMMA"
            ],
            [
                "7",
                "NUMBER_LITERAL"
            ],
            [
                ",",
                "COMMA"
            ],
            [
                "8",
                "NUMBER_LITERAL"
            ],
            [
                ",",
                "COMMA"
            ],
            [
                "9",
                "NUMBER_LITERAL"
            ],
            [
                "]",
                "SQUARE_BRACKET_CLOSE"
            ],
            [
                "in",
                "IN_KEYWORD"
            ],
            [
                "for",
                "FOR_KEYWORD"
            ],
            [
                "(",
                "PAREN_OPEN"
            ],
            [
                "x",
                "IDENTIFIER"
            ],
            [
                "in",
                "IN_KEYWORD"
            ],
            [
                "numbers",
                "IDENTIFIER"
            ],
            [
                ")",
                "PAREN_CLOSE"
            ],
            [
                "print",
                "IDENTIFIER"
            ],
            [
                "(",
                "PAREN_OPEN"
            ],
            [
                "x",
                "IDENTIFIER"
            ],
            [
                ")",
                "PAREN_CLOSE"
            ],
            [
                ";",
                "SEMICOLON"
            ],
            [
                "$",
                "EOF"
            ]
        ]
    },
    "\n        let numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9] in\n            print(numbers[7]);\n        ": {
        "description": "Sintaxis de indexaci\u00f3n de vectores.",
        "code": "\n        let numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9] in\n            print(numbers[7]);\n        ",
        "expected_tokens": [
            [
                "let",
                "LET_KEYWORD"
            ],
            [
                "numbers",
                "IDENTIFIER"
            ],
            [
                "=",
                "ASSIGN"
            ],
            [
                "[",
                "SQUARE_BRACKET_OPEN"
            ],
            [
                "1",
                "NUMBER_LITERAL"
            ],
            [
                ",",
                "COMMA"
            ],
            [
                "2",
                "NUMBER_LITERAL"
            ],
            [
                ",",
                "COMMA"
            ],
            [
                "3",
                "NUMBER_LITERAL"
            ],
            [
                ",",
                "COMMA"
            ],
            [
                "4",
                "NUMBER_LITERAL"
            ],
            [
                ",",
                "COMMA"
            ],
            [
                "5",
                "NUMBER_LITERAL"
            ],
            [
                ",",
                "COMMA"
            ],
            [
                "6",
                "NUMBER_LITERAL"
            ],
            [
                ",",
                "COMMA"
            ],
            [
                "7",
                "NUMBER_LITERAL"
            ],
            [
                ",",
                "COMMA"
            ],
            [
                "8",
                "NUMBER_LITERAL"
            ],
            [
                ",",
                "COMMA"
            ],
            [
                "9",
                "NUMBER_LITERAL"
            ],
            [
                "]",
                "SQUARE_BRACKET_CLOSE"
            ],
            [
                "in",
                "IN_KEYWORD"
            ],
            [
                "print",
                "IDENTIFIER"
            ],
            [
                "(",
                "PAREN_OPEN"
            ],
            [
                "numbers",
                "IDENTIFIER"
            ],
            [
                "[",
                "SQUARE_BRACKET_OPEN"
            ],
            [
                "7",
                "NUMBER_LITERAL"
            ],
            [
                "]",
                "SQUARE_BRACKET_CLOSE"
            ],
            [
                ")",
                "PAREN_CLOSE"
            ],
            [
                ";",
                "SEMICOLON"
            ],
            [
                "$",
                "EOF"
            ]
        ]
    },
    "\n        let squares = [x^2 || x in range(1, 10)] in print(squares);\n        ": {
        "description": "Sintaxis impl\u00edcita de vectores.",
        "code": "\n        let squares = [x^2 || x in range(1, 10)] in print(squares);\n        ",
        "expected_tokens": [
            [
                "let",
                "LET_KEYWORD"
            ],
            [
                "squares",
                "IDENTIFIER"
            ],
            [
                "=",
                "ASSIGN"
            ],
            [
                "[",
                "SQUARE_BRACKET_OPEN"
            ],
            [
                "x",
                "IDENTIFIER"
            ],
            [
                "^",
                "POWER"
            ],
            [
                "2",
                "NUMBER_LITERAL"
            ],
            [
                "||",
                "DOUBLE_PIPE"
            ],
            [
                "x",
                "IDENTIFIER"
            ],
            [
                "in",
                "IN_KEYWORD"
            ],
            [
                "range",
                "IDENTIFIER"
            ],
            [
                "(",
                "PAREN_OPEN"
            ],
            [
                "1",
                "NUMBER_LITERAL"
            ],
            [
                ",",
                "COMMA"
            ],
            [
                "10",
                "NUMBER_LITERAL"
            ],
            [
                ")",
                "PAREN_CLOSE"
            ],
            [
                "]",
                "SQUARE_BRACKET_CLOSE"
            ],
            [
                "in",
                "IN_KEYWORD"
            ],
            [
                "print",
                "IDENTIFIER"
            ],
            [
                "(",
                "PAREN_OPEN"
            ],
            [
                "squares",
                "IDENTIFIER"
            ],
            [
                ")",
                "PAREN_CLOSE"
            ],
            [
                ";",
                "SEMICOLON"
            ],
            [
                "$",
                "EOF"
            ]
        ]
    },
    "\n        function mean(numbers: Number[]): Number =>\n            let total = 0 in {\n                for (x in numbers)\n                    total := total + x;\n\n                total / numbers.size();\n            }\n\n        let numbers = [1, 2, 3, 4, 5] in\n            print(mean(numbers));\n        ": {
        "description": "Anotaci\u00f3n de tipos en argumentos de vectores.",
        "code": "\n        function mean(numbers: Number[]): Number =>\n            let total = 0 in {\n                for (x in numbers)\n                    total := total + x;\n\n                total / numbers.size();\n            }\n\n        let numbers = [1, 2, 3, 4, 5] in\n            print(mean(numbers));\n        ",
        "expected_tokens": [
            [
                "function",
                "FUNCTION_KEYWORD"
            ],
            [
                "mean",
                "IDENTIFIER"
            ],
            [
                "(",
                "PAREN_OPEN"
            ],
            [
                "numbers",
                "IDENTIFIER"
            ],
            [
                ":",
                "COLON"
            ],
            [
                "Number",
                "IDENTIFIER"
            ],
            [
                "[",
                "SQUARE_BRACKET_OPEN"
            ],
            [
                "]",
                "SQUARE_BRACKET_CLOSE"
            ],
            [
                ")",
                "PAREN_CLOSE"
            ],
            [
                ":",
                "COLON"
            ],
            [
                "Number",
                "IDENTIFIER"
            ],
            [
                "=>",
                "ARROW"
            ],
            [
                "let",
                "LET_KEYWORD"
            ],
            [
                "total",
                "IDENTIFIER"
            ],
            [
                "=",
                "ASSIGN"
            ],
            [
                "0",
                "NUMBER_LITERAL"
            ],
            [
                "in",
                "IN_KEYWORD"
            ],
            [
                "{",
                "BRACE_OPEN"
            ],
            [
                "for",
                "FOR_KEYWORD"
            ],
            [
                "(",
                "PAREN_OPEN"
            ],
            [
                "x",
                "IDENTIFIER"
            ],
            [
                "in",
                "IN_KEYWORD"
            ],
            [
                "numbers",
                "IDENTIFIER"
            ],
            [
                ")",
                "PAREN_CLOSE"
            ],
            [
                "total",
                "IDENTIFIER"
            ],
            [
                ":=",
                "DASSIGN"
            ],
            [
                "total",
                "IDENTIFIER"
            ],
            [
                "+",
                "PLUS"
            ],
            [
                "x",
                "IDENTIFIER"
            ],
            [
                ";",
                "SEMICOLON"
            ],
            [
                "total",
                "IDENTIFIER"
            ],
            [
                "/",
                "DIVIDE"
            ],
            [
                "numbers",
                "IDENTIFIER"
            ],
            [
                ".",
                "DOT"
            ],
            [
                "size",
                "IDENTIFIER"
            ],
            [
                "(",
                "PAREN_OPEN"
            ],
            [
                ")",
                "PAREN_CLOSE"
            ],
            [
                ";",
                "SEMICOLON"
            ],
            [
                "}",
                "BRACE_CLOSE"
            ],
            [
                "let",
                "LET_KEYWORD"
            ],
            [
                "numbers",
                "IDENTIFIER"
            ],
            [
                "=",
                "ASSIGN"
            ],
            [
                "[",
                "SQUARE_BRACKET_OPEN"
            ],
            [
                "1",
                "NUMBER_LITERAL"
            ],
            [
                ",",
                "COMMA"
            ],
            [
                "2",
                "NUMBER_LITERAL"
            ],
            [
                ",",
                "COMMA"
            ],
            [
                "3",
                "NUMBER_LITERAL"
            ],
            [
                ",",
                "COMMA"
            ],
            [
                "4",
                "NUMBER_LITERAL"
            ],
            [
                ",",
                "COMMA"
            ],
            [
                "5",
                "NUMBER_LITERAL"
            ],
            [
                "]",
                "SQUARE_BRACKET_CLOSE"
            ],
            [
                "in",
                "IN_KEYWORD"
            ],
            [
                "print",
                "IDENTIFIER"
            ],
            [
                "(",
                "PAREN_OPEN"
            ],
            [
                "mean",
                "IDENTIFIER"
            ],
            [
                "(",
                "PAREN_OPEN"
            ],
            [
                "numbers",
                "IDENTIFIER"
            ],
            [
                ")",
                "PAREN_CLOSE"
            ],
            [
                ")",
                "PAREN_CLOSE"
            ],
            [
                ";",
                "SEMICOLON"
            ],
            [
                "$",
                "EOF"
            ]
        ]
    },
    "\n        let numbers = [1, 2, 3, 4, 5] in\n            print(numbers.size());\n        ": {
        "description": "M\u00e9todo `size` de vectores.",
        "code": "\n        let numbers = [1, 2, 3, 4, 5] in\n            print(numbers.size());\n        ",
        "expected_tokens": [
            [
                "let",
                "LET_KEYWORD"
            ],
            [
                "numbers",
                "IDENTIFIER"
            ],
            [
                "=",
                "ASSIGN"
            ],
            [
                "[",
                "SQUARE_BRACKET_OPEN"
            ],
            [
                "1",
                "NUMBER_LITERAL"
            ],
            [
                ",",
                "COMMA"
            ],
            [
                "2",
                "NUMBER_LITERAL"
            ],
            [
                ",",
                "COMMA"
            ],
            [
                "3",
                "NUMBER_LITERAL"
            ],
            [
                ",",
                "COMMA"
            ],
            [
                "4",
                "NUMBER_LITERAL"
            ],
            [
                ",",
                "COMMA"
            ],
            [
                "5",
                "NUMBER_LITERAL"
            ],
            [
                "]",
                "SQUARE_BRACKET_CLOSE"
            ],
            [
                "in",
                "IN_KEYWORD"
            ],
            [
                "print",
                "IDENTIFIER"
            ],
            [
                "(",
                "PAREN_OPEN"
            ],
            [
                "numbers",
                "IDENTIFIER"
            ],
            [
                ".",
                "DOT"
            ],
            [
                "size",
                "IDENTIFIER"
            ],
            [
                "(",
                "PAREN_OPEN"
            ],
            [
                ")",
                "PAREN_CLOSE"
            ],
            [
                ")",
                "PAREN_CLOSE"
            ],
            [
                ";",
                "SEMICOLON"
            ],
            [
                "$",
                "EOF"
            ]
        ]
    }
}