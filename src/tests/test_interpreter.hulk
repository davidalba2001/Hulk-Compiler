protocol Ialgo{
    perro(x:Number, y:Number): Number;
}
type Iterator(init: Number, end: Number){
    min = init;
    max = end;
    current = init -1;

    next(): Boolean => (self.current := self.current+1) < self.max;
    current() => self.current;
}
type Point(x,y) {
    x = x;
    y = y;

    getX() => self.x;
    getY() => self.y;
    
    setX(a) => self.x := a;
    setY(a) => self.y := a;
}
type PolarPoint(phi, rho) inherits Point(rho * sin(phi), rho * cos(phi)) {
    rho() => sqrt(self.getX() ^ 2 + self.getY() ^ 2);
}
function suma(a, b){
    a + b;
}

type Pointer(x){
    x: Point = x;
}

{
    let a =  [x*x || x in new Iterator(3, 7)] in {
        for (x in a) {
            print(x);
        };
    };
};


